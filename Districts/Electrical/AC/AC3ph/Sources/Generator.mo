within Districts.Electrical.AC.AC3ph.Sources;
model Generator "Model of a generator"
  // Because the turbine produces power, we use the variable capacitor instead of
  // the inductor as a base class. fixme: check if this is correct
  extends Districts.Electrical.Interfaces.PartialSource(redeclare package
      PhaseSystem = Districts.Electrical.PhaseSystems.ThreePhase_dq, redeclare
      Interfaces.Terminal_p terminal);
  parameter Modelica.SIunits.Frequency f(start=50) "Frequency of the source";
  parameter Modelica.SIunits.Angle Phi(start=0) "Phase shift of the source";
  Modelica.SIunits.Angle thetaRel;
  Modelica.SIunits.Current I "value of current";
  Modelica.Blocks.Interfaces.RealInput P
    "Variable power generated by the source"                                                            annotation (Placement(transformation(
        extent={{-20,-20},{20,20}},
        rotation=0,
        origin={-100,0}),iconTransformation(
        extent={{-20,-20},{20,20}},
        rotation=0,
        origin={-100,0})));
equation
  if isRoot(terminal.theta) then
      PhaseSystem.thetaRef(terminal.theta) =  2*Modelica.Constants.pi*f*time;
  end if;

  thetaRel = PhaseSystem.thetaRel(terminal.theta);

  terminal.i = PhaseSystem.phaseCurrents(I, thetaRel+Phi);
  0 = PhaseSystem.activePower(terminal.v, terminal.i) + P;

  annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
            -100},{100,100}}),
                         graphics={Rectangle(extent={{-100,100},{100,-100}},
            lineColor={255,255,255}),
        Rectangle(
          extent={{-100,100},{100,-100}},
          lineColor={0,0,0},
          fillColor={255,255,255},
          fillPattern=FillPattern.Solid),
        Polygon(
          points={{-52,48},{-52,-52},{60,-16},{60,12},{-52,48}},
          lineColor={0,0,0},
          smooth=Smooth.None,
          fillColor={255,255,255},
          fillPattern=FillPattern.Solid),
        Text(
          extent={{-120,130},{120,100}},
          lineColor={0,120,120},
          textString="%name"),
        Line(
          points={{0,-120},{0,-100}},
          color=DynamicSelect({0,0,120}, if definiteReference then {0,120,120} else {255,255,
              255}),
          smooth=Smooth.None),
        Line(
          points={{-20,-120},{20,-120}},
          color=DynamicSelect({0,120,120}, if definiteReference then {0,120,120} else {255,255,
              255}),
          smooth=Smooth.None),
        Line(
          points={{-12,-126},{12,-126}},
          color=DynamicSelect({0,120,120}, if definiteReference then {0,120,120} else {255,255,
              255}),
          smooth=Smooth.None),
        Line(
          points={{-6,-132},{8,-132}},
          color=DynamicSelect({0,120,120}, if definiteReference then {0,120,120} else {255,255,
              255}),
          smooth=Smooth.None)}), Diagram(coordinateSystem(preserveAspectRatio=false,
          extent={{-100,-100},{100,100}}), graphics),
    Documentation(info="<html>
<p>
Model of an inductive generator.
</p>
<p>
This model must be used with 
<a href=\"modelica://Districts.Electrical.AC.Sources.Grid\">
Districts.Electrical.AC.Sources.Grid</a>
or with a voltage source from the package
<a href=\"modelica://Modelica.Electrical.QuasiStationary.SinglePhase.Sources\"
Modelica.Electrical.QuasiStationary.SinglePhase.Sources</a>.
Otherwise, there will be no equation that defines the phase
angle of the voltage.
</p>
</html>", revisions="<html>
<ul>
<li>
January 4, 2012, by Michael Wetter:<br>
First implementation.
</li>
</ul>
</html>"));
end Generator;
