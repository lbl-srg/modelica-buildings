{
  "within": "Buildings.Fluid.DXSystems.BaseClasses",
  "class_definition": [
    {
      "class_prefixes": "block",
      "class_specifier": {
        "long_class_specifier": {
          "identifier": "CapacityAirSource",
          "description_string": "Calculates cooling capacity at given temperature and flow fraction for air source coils",
          "composition": {
            "element_list": [
              {
                "extends_clause": {
                  "name": "Buildings.Fluid.DXSystems.Cooling.BaseClasses.PartialCapacity",
                  "class_modification": [
                    {
                      "element_modification_or_replaceable": {
                        "element_modification": {
                          "name": "use_mCon_flow",
                          "modification": {
                            "equal": true,
                            "expression": {
                              "simple_expression": "false"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "element_sections": [
              {
                "equation_section": {
                  "equation": [
                    {
                      "if_equation": {
                        "if_elseif": [
                          {
                            "condition": {
                              "simple_expression": {
                                "logical_expression": {
                                  "logical_or": [
                                    {
                                      "logical_and": [
                                        {
                                          "arithmetic_expressions": [
                                            {
                                              "name": "stage"
                                            },
                                            {
                                              "name": "0"
                                            }
                                          ],
                                          "relation_operator": ">"
                                        }
                                      ]
                                    }
                                  ]
                                }
                              }
                            },
                            "then": [
                              {
                                "equation": {
                                  "for_equation": {
                                    "for_indices": [
                                      {
                                        "identifier": "iSta",
                                        "expression": {
                                          "simple_expression": "1:nSta"
                                        }
                                      }
                                    ],
                                    "loop_equations": [
                                      {
                                        "assignment_equation": {
                                          "lhs": "Q_flow[iSta]",
                                          "rhs": {
                                            "simple_expression": "corFac[iSta]*cap_T[iSta]*cap_FF[iSta]*sta[iSta].nomVal.Q_flow_nominal"
                                          }
                                        }
                                      },
                                      {
                                        "assignment_equation": {
                                          "lhs": "EIR[iSta]",
                                          "rhs": {
                                            "simple_expression": "corFac[iSta]*EIR_T[iSta]*EIR_FF[iSta]/sta[iSta].nomVal.COP_nominal"
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            ]
                          }
                        ],
                        "else_equation": [
                          {
                            "assignment_equation": {
                              "lhs": "Q_flow",
                              "rhs": {
                                "simple_expression": {
                                  "function_call": {
                                    "name": "fill",
                                    "arguments": [
                                      {
                                        "name": "0"
                                      },
                                      {
                                        "name": "nSta"
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          },
                          {
                            "assignment_equation": {
                              "lhs": "EIR",
                              "rhs": {
                                "simple_expression": {
                                  "function_call": {
                                    "name": "fill",
                                    "arguments": [
                                      {
                                        "name": "0"
                                      },
                                      {
                                        "name": "nSta"
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ],
            "annotation": [
              {
                "element_modification_or_replaceable": {
                  "element_modification": {
                    "name": "defaultComponentName",
                    "modification": {
                      "equal": true,
                      "expression": {
                        "simple_expression": "\"cooCap\""
                      }
                    }
                  }
                }
              },
              {
                "element_modification_or_replaceable": {
                  "element_modification": {
                    "name": "Icon",
                    "modification": {
                      "class_modification": [
                        {
                          "element_modification_or_replaceable": {
                            "element_modification": {
                              "coordinateSystem": {
                                "extent": [
                                  {
                                    "x": -100,
                                    "y": -100
                                  },
                                  {
                                    "x": 100,
                                    "y": 100
                                  }
                                ],
                                "preserveAspectRatio": "true"
                              }
                            }
                          }
                        },
                        {
                          "element_modification_or_replaceable": {
                            "element_modification": {
                              "graphics": [
                                {
                                  "name": "Text",
                                  "attribute": {
                                    "extent": [
                                      {
                                        "x": -100,
                                        "y": 100
                                      },
                                      {
                                        "x": 100,
                                        "y": -100
                                      }
                                    ],
                                    "textString": "\"f(T,m)\"",
                                    "textColor": {
                                      "r": 0,
                                      "g": 0,
                                      "b": 255
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "element_modification_or_replaceable": {
                  "element_modification": {
                    "name": "Documentation",
                    "modification": {
                      "class_modification": [
                        {
                          "element_modification_or_replaceable": {
                            "element_modification": {
                              "name": "info",
                              "modification": {
                                "equal": true,
                                "expression": {
                                  "simple_expression": "\"<html>\n<p>\nThis model calculates cooling capacity and EIR for air source DX coils in off-designed conditions based on\nperformance modifers calculated in partial model\n<a href=\\\"modelica://Buildings.Fluid.DXSystems.Cooling.BaseClasses.PartialCapacity\\\">\nBuildings.Fluid.DXSystems.Cooling.BaseClasses.PartialCapacity</a>.\n</p>\n<h4>Cooling capacity</h4>\n<p>\nThe cooling capacity modifiers are multiplied with nominal cooling capacity to obtain\nthe cooling capacity of the coil at given inlet temperatures and mass flow rate as\n</p>\n<p align=\\\"center\\\" style=\\\"font-style:italic;\\\">\n      Q̇(&theta;<sub>e,in</sub>, &theta;<sub>c,in</sub>, ff) = cap<sub>&theta;</sub>(&theta;<sub>e,in</sub>, &theta;<sub>c,in</sub>) cap<sub>FF</sub>(ff) Q̇<sub>nom</sub>,\n</p>\n<p>\n  where <i>&theta;<sub>e,in</sub></i> is the evaporator inlet temperature\n  and <i>&theta;<sub>c,in</sub></i> is the condenser inlet temperature in degrees Celsius.\n  <i>&theta;<sub>e,in</sub></i> is the dry-bulb temperature if the coil is dry,\n  or the wet-bulb temperature if the coil is wet.\n  <i>cap<sub>&theta;</sub>(&theta;<sub>e,in</sub>, &theta;<sub>c,in</sub></i>) is\n  cooling capacity modifier as a function of temperature.\n  cap<sub>FF</sub>(ff) is cooling capacity modifier as a function of\n  nomalized mass flowrate at the evaporator.\n</p>\n<h4>Energy Input Ratio (EIR)</h4>\n<p>\n  The Energy Input Ratio (<i>EIR</i>) is the inverse of the Coefficient of Performance (<i>COP</i>).\n  Similar to the cooling rate, the EIR of the coil is the product of a function that\n  takes into account changes in condenser and evaporator inlet temperatures,\n  and changes in mass flow rate. The EIR is computed as\n</p>\n<p align=\\\"center\\\" style=\\\"font-style:italic;\\\">\n     EIR(&theta;<sub>e,in</sub>, &theta;<sub>c,in</sub>, ff) = EIR<sub>&theta;</sub>(&theta;<sub>e,in</sub>, &theta;<sub>c,in</sub>) EIR<sub>FF</sub>(ff) &frasl; COP<sub>nominal</sub>\n</p>\n</html>\""
                                }
                              }
                            }
                          }
                        },
                        {
                          "element_modification_or_replaceable": {
                            "element_modification": {
                              "name": "revisions",
                              "modification": {
                                "equal": true,
                                "expression": {
                                  "simple_expression": "\"<html>\n<ul>\n<li>\nApril 3, 2023 by Karthik Devaprasad and Xing Lu:<br/>\nUpdated class name from <code>CoolingCapacityAirCooled</code> to <code>CoilCapacityAirSource</code>, since\nthe class is used in both heating coil and cooling coil calculations for air-source\nDX coils.<br/>\nUpdated class being extended from <code>PartialCoolingCapacity</code> to\n<a href=\\\"modelica://Buildings.Fluid.DXSystems.Cooling.BaseClasses.PartialCapacity\\\">\nBuildings.Fluid.DXSystems.Cooling.BaseClasses.PartialCapacity</a>.\n</li>\n<li>\nFebruary 17, 2017 by Yangyang Fu:<br/>\nFirst implementation.\n</li>\n</ul>\n\n</html>\""
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            ]
          }
        }
      }
    }
  ],
  "modelicaFile": "Buildings/Fluid/DXSystems/BaseClasses/CapacityAirSource.mo",
  "fullMoFilePath": "/home/reituag/gitrepo/modelica-buildings/Buildings/Fluid/DXSystems/BaseClasses/CapacityAirSource.mo",
  "checksum": "d6cae70cdb8507d18e1996ec4afd7093"
}