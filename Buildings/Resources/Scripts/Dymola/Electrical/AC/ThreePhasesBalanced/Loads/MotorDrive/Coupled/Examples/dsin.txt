#1
char Aclass(3,24)
Adymosim
1.4
Modelica experiment file


#    Experiment parameters
double experiment(7,1)
       0                   # StartTime    Time at which integration starts
                           #              (and linearization and trimming time)
     600                   # StopTime     Time at which integration stops
       0                   # Increment    Communication step size, if > 0
     500                   # nInterval    Number of communication intervals, if > 0
  9.9999999999999995E-07   # Tolerance    Relative precision of signals for
                           #              simulation, linearization and trimming
       0                   # MaxFixedStep Maximum step size of fixed step size
                           #              integrators, if > 0.0
       8                   # Algorithm    Integration algorithm as integer (1...28)
                           #
                           #             | model|       |        | dense | state |
                           # Algorithm   | typ  | stiff | order  | output| event |
                           # ------------+------+-------+--------+-------+-------+
                           #  1 | deabm  |  ode |   no  |  1-12  |  yes  |   no  |
                           #  2 | lsode1 |  ode |   no  |  1-12  |  yes  |   no  |
                           #  3 | lsode2 |  ode |  yes  |  1-5   |  yes  |   no  |
                           #  4 | lsodar |  ode |  both |1-12,1-5|  yes  |  yes  |
                           #  5 | dopri5 |  ode |   no  |   5    |   no  |   no  |
                           #  6 | dopri8 |  ode |   no  |   8    |   no  |   no  |
                           #  7 | grk4t  |  ode |  yes  |   4    |   no  |   no  |
                           #  8 | dassl  |  dae |  yes  |  1-5   |  yes  |  yes  |
                           #  9 | odassl | hdae |  yes  |  1-5   |  yes  |  yes  |
                           # 10 | mexx   | hdae |   no  |  2-24  |   no  |   no  |
                           # 11 | euler  |  ode |   no  |   1    |   no  |  yes  |
                           # 12 | rkfix2 |  ode |   no  |   2    |   no  |  yes  |
                           # 13 | rkfix3 |  ode |   no  |   3    |   no  |  yes  |
                           # 14 | rkfix4 |  ode |   no  |   4    |   no  |  yes  |
                           #>=14| others |  ode |yes/no |  2-5   |   yes |  yes  |
                           # ---+--------+------+-------+--------+-------+-------+
                           # euler and rkfix have fixed stepsize.


#    Method tuning parameters
double method(27,1)
       1                   # grid     type of communication time grid, defined by
                           #          = 1: equidistant points ("Increment/nInterval")
                           #          = 2: vector of grid points ("tgrid")
                           #          = 3: variable step integrator (automatically)
                           #          = 4: model (call of "increment" in Dymola, e.g.
                           #                      incr=Time > 2 then 0 else 0.1
                           #                      dummy=increment(incr))
                           #          grid = 1,3 is stopped by "StopTime"
                           #          grid = 2   is stopped by "tgrid(last)"
                           #          grid = 4   runs forever (stopped by model)
       1                   # nt       Use every NT time instant, if grid = 3
       3                   # dense    1/2/3 restart/step/interpolate GRID points
       1                   # evgrid   0/1 do not/save event points in comm. time grid
       1                   # evu      0/1 U-discontinuity does not/trigger events
       0                   # evuord       U-discontinuity order to consider (0,1,...)
       0                   # error    0/1/2 One message/warning/error messages
       0                   # jac      0/1 Compute jacobian numerically/by BLOCKJ
       0                   # xd0c     0/1 Compute/set XD0
       0                   # f3       0/1 Ignore/use F3 of HDAE (= index 1)
       0                   # f4       0/1 Ignore/use F4 of HDAE (= index 2)
       0                   # f5       0/1 Ignore/use F5 of HDAE (= invar.)
       0                   # debug    flags for debug information (1<<0 uses pdebug) 
     100                   # pdebug       priority of debug information (1...100)
       0                   # fmax     Maximum number of evaluations of BLOCKF, if > 0
       0                   # ordmax   Maximum allowed integration order, if > 0
       0                   # hmax     Maximum absolute stepsize, if > 0
       0                   # hmin     Minimum absolute stepsize, if > 0 (use with care!)
       0                   # h0       Stepsize to be attempted on first step, if > 0
  2.0000000000000000E-14   # teps     Bound to check, if 2 equal time instants
  1.0000000000000000E-10   # eveps    Hysteresis epsilon at event points
      20                   # eviter   Maximum number of event iterations
  9.9999999999999995E-07   # delaym   Minimum time increment in delay buffers
       1                   # fexcep   0/1 floating exception crashes/stops dymosim
       1                   # tscale   clock-time = tscale*simulation-time, if grid = 5
                           #          > 1: simulation too slow
                           #          = 1: simulation-time = real-time
                           #          < 1: simulation too fast
       1                   # shared   (not used)
    2473                   # memkey   (not used)


#    Output parameters
int settings(13,1)
 0                         # lprec    0/1 do not/store result data in double
 1                         # lx       0/1 do not/store x  (state variables)
 1                         # lxd      0/1 do not/store xd (derivative of states)
 1                         # lu       0/1 do not/store u  (input     signals)
 1                         # ly       0/1 do not/store y  (output    signals)
 0                         # lz       0/1 do not/store z  (indicator signals)
 1                         # lw       0/1 do not/store w  (auxiliary signals)
 1                         # la       0/1 do not/store a  (alias     signals)
 0                         # lperf    0/1 do not/store performance indicators
 0                         # levent   0/1 do not/store event point
 1                         # lres     0/1 do not/store results on result file
 0                         # lshare   0/1 do not/store info data for shared memory on dsshare.txt
 1                         # lform    0/1 ASCII/Matlab-binary storage format of results
                           #              (for simulation/linearization; not for trimming)


#    Names of initial variables
char initialName(719,58)
P_nominal
dTEva_nominal
dTCon_nominal
COP_nominal
m2_flow_nominal
m1_flow_nominal
sou1.nPorts
sou1.verifyInputs
sou1.ports[1].p
sou1.ports[1].h_outflow
sou1.flowDirection
sou1.X_in_internal[1]
sou1.use_X_in
sou1.use_Xi_in
sou1.use_C_in
sou1.X[1]
sou1.use_m_flow_in
sou1.m_flow
sou1.use_T_in
sou1.T
sou1.T_in_internal
TCon_in.height
TCon_in.duration
TCon_in.offset
TCon_in.startTime
sou2.nPorts
sou2.verifyInputs
sou2.ports[1].p
sou2.ports[1].h_outflow
sou2.flowDirection
sou2.X_in_internal[1]
sou2.use_X_in
sou2.use_Xi_in
sou2.use_C_in
sou2.X[1]
sou2.use_m_flow_in
sou2.m_flow
sou2.use_T_in
sou2.T
sou2.T_in_internal
Sou.terminal.v[1]
Sou.terminal.v[2]
Sou.terminal.i[1]
Sou.terminal.i[2]
Sou.f
Sou.V
Sou.phiSou
Sou.P.real
Sou.P.apparent
Sou.P.phi
Sou.P.cosPhi
Sou.sou.potentialReference
Sou.sou.definiteReference
Sou.sou.S[2]
Sou.sou.f
Sou.sou.V
Sou.sou.phiSou
Sou.sou.thetaRel
senTem.allowFlowReversal
senTem.port_a.h_outflow
senTem.port_b.h_outflow
senTem.m_flow_nominal
senTem.m_flow_small
senTem.tau
senTem.initType
senTem.k
senTem.dynamic
senTem.mNor_flow
senTem.tauInv
senTem.T
senTem.der(T)
senTem.T_start
senTem.transferHeat
senTem.TAmb
senTem.tauHeaTra
senTem.tauHeaTraInv
senTem.ratTau
senTem.TMed
senTem.T_a_inflow
senTem.T_b_inflow
TSet.height
TSet.y
TSet.offset
TSet.startTime
sin2.nPorts
sin2.verifyInputs
sin2.flowDirection
sin2.X_in_internal[1]
sin2.use_X_in
sin2.use_Xi_in
sin2.use_C_in
sin2.X[1]
sin2.use_p_in
sin2.p
sin2.use_T_in
sin2.T
sin2.checkWaterPressure
sin2.checkAirPressure
sin1.nPorts
sin1.verifyInputs
sin1.ports[1].h_outflow
sin1.flowDirection
sin1.X_in_internal[1]
sin1.use_X_in
sin1.use_Xi_in
sin1.use_C_in
sin1.X[1]
sin1.use_p_in
sin1.p
sin1.use_T_in
sin1.T
sin1.checkWaterPressure
sin1.checkAirPressure
chi.allowFlowReversal1
chi.allowFlowReversal2
chi.port_a1.h_outflow
chi.port_b1.h_outflow
chi.port_a2.h_outflow
chi.m1_flow_nominal
chi.m2_flow_nominal
chi.m1_flow_small
chi.m2_flow_small
chi.show_T
chi.dp1
chi.dp2
chi.state_a1_inflow.T
chi.state_b1_inflow.T
chi.state_a2_inflow.T
chi.state_b2_inflow.T
chi.QEva_flow_nominal
chi.QCon_flow_nominal
chi.dTEva_nominal
chi.dTCon_nominal
chi.P_nominal
chi.Nrpm_nominal
chi.dp1_nominal
chi.dp2_nominal
chi.use_eta_Carnot_nominal
chi.etaCarnot_nominal
chi.COP_nominal
chi.TCon_nominal
chi.TEva_nominal
chi.a[1]
chi.TAppCon_nominal
chi.TAppEva_nominal
chi.per.P
chi.per.J
chi.per.Lr
chi.per.Ls
chi.per.Lm
chi.per.Rs
chi.per.Rr
chi.per.Freq
chi.per.Voltage
chi.P
chi.J
chi.Lr
chi.Ls
chi.Lm
chi.Rr
chi.Rs
chi.have_controller
chi.controllerType
chi.k
chi.Ti
chi.Td
chi.yMax
chi.yMin
chi.mecChi.allowFlowReversal1
chi.mecChi.allowFlowReversal2
chi.mecChi.m1_flow_nominal
chi.mecChi.m2_flow_nominal
chi.mecChi.m1_flow_small
chi.mecChi.m2_flow_small
chi.mecChi.show_T
chi.mecChi.dp1
chi.mecChi.dp2
chi.mecChi.state_a1_inflow.T
chi.mecChi.state_b1_inflow.T
chi.mecChi.state_a2_inflow.T
chi.mecChi.state_b2_inflow.T
chi.mecChi.QEva_flow_nominal
chi.mecChi.QCon_flow_nominal
chi.mecChi.dTEva_nominal
chi.mecChi.dTCon_nominal
chi.mecChi.P_nominal
chi.mecChi.dp1_nominal
chi.mecChi.dp2_nominal
chi.mecChi.Nrpm_nominal
chi.mecChi.loaIne
chi.mecChi.use_eta_Carnot_nominal
chi.mecChi.etaCarnot_nominal
chi.mecChi.COP_nominal
chi.mecChi.TCon_nominal
chi.mecChi.TEva_nominal
chi.mecChi.a[1]
chi.mecChi.TAppCon_nominal
chi.mecChi.TAppEva_nominal
chi.mecChi.tauChi
chi.mecChi.chi.allowFlowReversal1
chi.mecChi.chi.allowFlowReversal2
chi.mecChi.chi.m1_flow_nominal
chi.mecChi.chi.m2_flow_nominal
chi.mecChi.chi.m1_flow_small
chi.mecChi.chi.m2_flow_small
chi.mecChi.chi.show_T
chi.mecChi.chi.dp1
chi.mecChi.chi.dp2
chi.mecChi.chi.state_a1_inflow.T
chi.mecChi.chi.state_b1_inflow.T
chi.mecChi.chi.state_a2_inflow.T
chi.mecChi.chi.state_b2_inflow.T
chi.mecChi.chi.homotopyInitialization
chi.mecChi.chi.QEva_flow_nominal
chi.mecChi.chi.QCon_flow_nominal
chi.mecChi.chi.dTEva_nominal
chi.mecChi.chi.dTCon_nominal
chi.mecChi.chi.use_eta_Carnot_nominal
chi.mecChi.chi.etaCarnot_nominal
chi.mecChi.chi.COP_nominal
chi.mecChi.chi.TCon_nominal
chi.mecChi.chi.TEva_nominal
chi.mecChi.chi.a[1]
chi.mecChi.chi.dp1_nominal
chi.mecChi.chi.dp2_nominal
chi.mecChi.chi.TAppCon_nominal
chi.mecChi.chi.TAppEva_nominal
chi.mecChi.chi.from_dp1
chi.mecChi.chi.from_dp2
chi.mecChi.chi.linearizeFlowResistance1
chi.mecChi.chi.linearizeFlowResistance2
chi.mecChi.chi.deltaM1
chi.mecChi.chi.deltaM2
chi.mecChi.chi.tau1
chi.mecChi.chi.tau2
chi.mecChi.chi.T1_start
chi.mecChi.chi.T2_start
chi.mecChi.chi.energyDynamics
chi.mecChi.chi.yPL
chi.mecChi.chi.etaPL
chi.mecChi.chi.COP
chi.mecChi.chi.COPCar
chi.mecChi.chi.TConAct
chi.mecChi.chi.TEvaAct
chi.mecChi.chi.COP_is_for_cooling
chi.mecChi.chi.etaCarnot_nominal_internal
chi.mecChi.chi.evaluate_etaPL
chi.mecChi.chi.TUseAct_nominal
chi.mecChi.chi.cp1_default
chi.mecChi.chi.cp2_default
chi.mecChi.chi.staA1.T
chi.mecChi.chi.staB1.T
chi.mecChi.chi.staA2.T
chi.mecChi.chi.staB2.T
chi.mecChi.chi.con.allowFlowReversal
chi.mecChi.chi.con.m_flow_nominal
chi.mecChi.chi.con.m_flow_small
chi.mecChi.chi.con.show_T
chi.mecChi.chi.con.dp
chi.mecChi.chi.con._m_flow_start
chi.mecChi.chi.con._dp_start
chi.mecChi.chi.con.computeFlowResistance
chi.mecChi.chi.con.from_dp
chi.mecChi.chi.con.dp_nominal
chi.mecChi.chi.con.linearizeFlowResistance
chi.mecChi.chi.con.deltaM
chi.mecChi.chi.con.homotopyInitialization
chi.mecChi.chi.con.tau
chi.mecChi.chi.con.energyDynamics
chi.mecChi.chi.con.p_start
chi.mecChi.chi.con.T_start
chi.mecChi.chi.con.X_start[1]
chi.mecChi.chi.con.vol.energyDynamics
chi.mecChi.chi.con.vol.massDynamics
chi.mecChi.chi.con.vol.substanceDynamics
chi.mecChi.chi.con.vol.traceDynamics
chi.mecChi.chi.con.vol.p_start
chi.mecChi.chi.con.vol.T_start
chi.mecChi.chi.con.vol.X_start[1]
chi.mecChi.chi.con.vol.mSenFac
chi.mecChi.chi.con.vol.wrongEnergyMassBalanceConfiguration
chi.mecChi.chi.con.vol.initialize_p
chi.mecChi.chi.con.vol.prescribedHeatFlowRate
chi.mecChi.chi.con.vol.simplify_mWat_flow
chi.mecChi.chi.con.vol.m_flow_nominal
chi.mecChi.chi.con.vol.nPorts
chi.mecChi.chi.con.vol.m_flow_small
chi.mecChi.chi.con.vol.allowFlowReversal
chi.mecChi.chi.con.vol.V
chi.mecChi.chi.con.vol.T
chi.mecChi.chi.con.vol.U
chi.mecChi.chi.con.vol.m
chi.mecChi.chi.con.vol.rho_start
chi.mecChi.chi.con.vol.state_default.p
chi.mecChi.chi.con.vol.state_default.T
chi.mecChi.chi.con.vol.rho_default
chi.mecChi.chi.con.vol.state_start.p
chi.mecChi.chi.con.vol.state_start.T
chi.mecChi.chi.con.vol.useSteadyStateTwoPort
chi.mecChi.chi.con.vol.hOut_internal
chi.mecChi.chi.con.vol.use_C_flow
chi.mecChi.chi.con.vol.steBal.allowFlowReversal
chi.mecChi.chi.con.vol.steBal.m_flow_nominal
chi.mecChi.chi.con.vol.steBal.m_flow_small
chi.mecChi.chi.con.vol.steBal.show_T
chi.mecChi.chi.con.vol.steBal.dp
chi.mecChi.chi.con.vol.steBal._m_flow_start
chi.mecChi.chi.con.vol.steBal._dp_start
chi.mecChi.chi.con.vol.steBal.simplify_mWat_flow
chi.mecChi.chi.con.vol.steBal.prescribedHeatFlowRate
chi.mecChi.chi.con.vol.steBal.use_mWat_flow
chi.mecChi.chi.con.vol.steBal.use_C_flow
chi.mecChi.chi.con.vol.steBal.use_m_flowInv
chi.mecChi.chi.con.vol.steBal.m_flowInv
chi.mecChi.chi.con.vol.steBal.deltaReg
chi.mecChi.chi.con.vol.steBal.deltaInvReg
chi.mecChi.chi.con.vol.steBal.aReg
chi.mecChi.chi.con.vol.steBal.bReg
chi.mecChi.chi.con.vol.steBal.cReg
chi.mecChi.chi.con.vol.steBal.dReg
chi.mecChi.chi.con.vol.steBal.eReg
chi.mecChi.chi.con.vol.steBal.fReg
chi.mecChi.chi.con.vol.steBal.state_default.p
chi.mecChi.chi.con.vol.steBal.state_default.T
chi.mecChi.chi.con.vol.steBal.cp_default
chi.mecChi.chi.con.vol.steBal.dTMax
chi.mecChi.chi.con.vol.steBal.mWat_flow_internal
chi.mecChi.chi.con.preDro.allowFlowReversal
chi.mecChi.chi.con.preDro.m_flow_nominal
chi.mecChi.chi.con.preDro.m_flow_small
chi.mecChi.chi.con.preDro.show_T
chi.mecChi.chi.con.preDro.dp
chi.mecChi.chi.con.preDro._m_flow_start
chi.mecChi.chi.con.preDro._dp_start
chi.mecChi.chi.con.preDro.homotopyInitialization
chi.mecChi.chi.con.preDro.from_dp
chi.mecChi.chi.con.preDro.dp_nominal
chi.mecChi.chi.con.preDro.linearized
chi.mecChi.chi.con.preDro.m_flow_turbulent
chi.mecChi.chi.con.preDro.sta_default.p
chi.mecChi.chi.con.preDro.sta_default.T
chi.mecChi.chi.con.preDro.eta_default
chi.mecChi.chi.con.preDro.m_flow_nominal_pos
chi.mecChi.chi.con.preDro.dp_nominal_pos
chi.mecChi.chi.con.preDro.deltaM
chi.mecChi.chi.con.preDro.k
chi.mecChi.chi.con.preDro.computeFlowResistance
chi.mecChi.chi.con.preDro.coeff
chi.mecChi.chi.con.sta_default.p
chi.mecChi.chi.con.sta_default.T
chi.mecChi.chi.con.rho_default
chi.mecChi.chi.con.sta_start.p
chi.mecChi.chi.con.sta_start.T
chi.mecChi.chi.con.h_outflow_start
chi.mecChi.chi.con.Q_flow_nominal
chi.mecChi.chi.con.u
chi.mecChi.chi.con.preHea.T_ref
chi.mecChi.chi.con.preHea.alpha
chi.mecChi.chi.con.gai.k
chi.mecChi.chi.eva.allowFlowReversal
chi.mecChi.chi.eva.m_flow_nominal
chi.mecChi.chi.eva.m_flow_small
chi.mecChi.chi.eva.show_T
chi.mecChi.chi.eva.dp
chi.mecChi.chi.eva._m_flow_start
chi.mecChi.chi.eva._dp_start
chi.mecChi.chi.eva.computeFlowResistance
chi.mecChi.chi.eva.from_dp
chi.mecChi.chi.eva.dp_nominal
chi.mecChi.chi.eva.linearizeFlowResistance
chi.mecChi.chi.eva.deltaM
chi.mecChi.chi.eva.homotopyInitialization
chi.mecChi.chi.eva.tau
chi.mecChi.chi.eva.energyDynamics
chi.mecChi.chi.eva.p_start
chi.mecChi.chi.eva.T_start
chi.mecChi.chi.eva.X_start[1]
chi.mecChi.chi.eva.vol.energyDynamics
chi.mecChi.chi.eva.vol.massDynamics
chi.mecChi.chi.eva.vol.substanceDynamics
chi.mecChi.chi.eva.vol.traceDynamics
chi.mecChi.chi.eva.vol.p_start
chi.mecChi.chi.eva.vol.T_start
chi.mecChi.chi.eva.vol.X_start[1]
chi.mecChi.chi.eva.vol.mSenFac
chi.mecChi.chi.eva.vol.wrongEnergyMassBalanceConfiguration
chi.mecChi.chi.eva.vol.initialize_p
chi.mecChi.chi.eva.vol.prescribedHeatFlowRate
chi.mecChi.chi.eva.vol.simplify_mWat_flow
chi.mecChi.chi.eva.vol.m_flow_nominal
chi.mecChi.chi.eva.vol.nPorts
chi.mecChi.chi.eva.vol.m_flow_small
chi.mecChi.chi.eva.vol.allowFlowReversal
chi.mecChi.chi.eva.vol.V
chi.mecChi.chi.eva.vol.T
chi.mecChi.chi.eva.vol.U
chi.mecChi.chi.eva.vol.m
chi.mecChi.chi.eva.vol.rho_start
chi.mecChi.chi.eva.vol.state_default.p
chi.mecChi.chi.eva.vol.state_default.T
chi.mecChi.chi.eva.vol.rho_default
chi.mecChi.chi.eva.vol.state_start.p
chi.mecChi.chi.eva.vol.state_start.T
chi.mecChi.chi.eva.vol.useSteadyStateTwoPort
chi.mecChi.chi.eva.vol.hOut_internal
chi.mecChi.chi.eva.vol.use_C_flow
chi.mecChi.chi.eva.vol.steBal.allowFlowReversal
chi.mecChi.chi.eva.vol.steBal.m_flow_nominal
chi.mecChi.chi.eva.vol.steBal.m_flow_small
chi.mecChi.chi.eva.vol.steBal.show_T
chi.mecChi.chi.eva.vol.steBal.dp
chi.mecChi.chi.eva.vol.steBal._m_flow_start
chi.mecChi.chi.eva.vol.steBal._dp_start
chi.mecChi.chi.eva.vol.steBal.simplify_mWat_flow
chi.mecChi.chi.eva.vol.steBal.prescribedHeatFlowRate
chi.mecChi.chi.eva.vol.steBal.use_mWat_flow
chi.mecChi.chi.eva.vol.steBal.use_C_flow
chi.mecChi.chi.eva.vol.steBal.use_m_flowInv
chi.mecChi.chi.eva.vol.steBal.m_flowInv
chi.mecChi.chi.eva.vol.steBal.deltaReg
chi.mecChi.chi.eva.vol.steBal.deltaInvReg
chi.mecChi.chi.eva.vol.steBal.aReg
chi.mecChi.chi.eva.vol.steBal.bReg
chi.mecChi.chi.eva.vol.steBal.cReg
chi.mecChi.chi.eva.vol.steBal.dReg
chi.mecChi.chi.eva.vol.steBal.eReg
chi.mecChi.chi.eva.vol.steBal.fReg
chi.mecChi.chi.eva.vol.steBal.state_default.p
chi.mecChi.chi.eva.vol.steBal.state_default.T
chi.mecChi.chi.eva.vol.steBal.cp_default
chi.mecChi.chi.eva.vol.steBal.dTMax
chi.mecChi.chi.eva.vol.steBal.mWat_flow_internal
chi.mecChi.chi.eva.preDro.allowFlowReversal
chi.mecChi.chi.eva.preDro.m_flow_nominal
chi.mecChi.chi.eva.preDro.m_flow_small
chi.mecChi.chi.eva.preDro.show_T
chi.mecChi.chi.eva.preDro.dp
chi.mecChi.chi.eva.preDro._m_flow_start
chi.mecChi.chi.eva.preDro._dp_start
chi.mecChi.chi.eva.preDro.homotopyInitialization
chi.mecChi.chi.eva.preDro.from_dp
chi.mecChi.chi.eva.preDro.dp_nominal
chi.mecChi.chi.eva.preDro.linearized
chi.mecChi.chi.eva.preDro.m_flow_turbulent
chi.mecChi.chi.eva.preDro.sta_default.p
chi.mecChi.chi.eva.preDro.sta_default.T
chi.mecChi.chi.eva.preDro.eta_default
chi.mecChi.chi.eva.preDro.m_flow_nominal_pos
chi.mecChi.chi.eva.preDro.dp_nominal_pos
chi.mecChi.chi.eva.preDro.deltaM
chi.mecChi.chi.eva.preDro.k
chi.mecChi.chi.eva.preDro.computeFlowResistance
chi.mecChi.chi.eva.preDro.coeff
chi.mecChi.chi.eva.sta_default.p
chi.mecChi.chi.eva.sta_default.T
chi.mecChi.chi.eva.rho_default
chi.mecChi.chi.eva.sta_start.p
chi.mecChi.chi.eva.sta_start.T
chi.mecChi.chi.eva.h_outflow_start
chi.mecChi.chi.eva.Q_flow_nominal
chi.mecChi.chi.eva.u
chi.mecChi.chi.eva.preHea.T_ref
chi.mecChi.chi.eva.preHea.alpha
chi.mecChi.chi.eva.gai.k
chi.mecChi.chi.P_nominal
chi.mecChi.chi.y
chi.mecChi.chi.QCon_flow_internal
chi.mecChi.chi.QEva_flow_internal
chi.mecChi.chi.PEle.k
chi.mecChi.shaft.tau
chi.mecChi.ine.J
chi.mecChi.ine.stateSelect
chi.mecChi.ine.phi
chi.mecChi.ine.w
chi.mecChi.ine.der(w)
chi.mecChi.tor.useSupport
chi.mecChi.tor.phi_support
chi.mecChi.spe.flange.tau
chi.mecChi.to_rpm.y
chi.mecChi.multiProduct.significantDigits
chi.mecChi.multiProduct.nu
chi.mecChi.multiProduct.u[1]
chi.mecChi.gaiSpe.k
chi.mecChi.QCon_flow
chi.mecChi.P
chi.mecChi.QEva_flow
chi.mecChi.COP_is_for_cooling
chi.mecChi.TUseAct_nominal
chi.mecChi.cp1_default
chi.mecChi.cp2_default
chi.simMot.per.P
chi.simMot.per.J
chi.simMot.per.Lr
chi.simMot.per.Ls
chi.simMot.per.Lm
chi.simMot.per.Rs
chi.simMot.per.Rr
chi.simMot.per.Freq
chi.simMot.per.Voltage
chi.simMot.P
chi.simMot.J
chi.simMot.Lr
chi.simMot.Ls
chi.simMot.Lm
chi.simMot.Rr
chi.simMot.Rs
chi.simMot.have_controller
chi.simMot.reverseActing
chi.simMot.controllerType
chi.simMot.k
chi.simMot.Ti
chi.simMot.Td
chi.simMot.yMax
chi.simMot.yMin
chi.simMot.v_rms
chi.simMot.i_rms
chi.simMot.pow_gap
chi.simMot.theta_s
chi.simMot.der(theta_s)
chi.simMot.fre.y
chi.simMot.VFDfre.u1
chi.simMot.current_Block.I_a
chi.simMot.current_Block.I_b
chi.simMot.current_Block.I_c
chi.simMot.speBlo.tau_e
chi.simMot.speBlo.omega
chi.simMot.speBlo.omega_r
chi.simMot.speBlo.N
chi.simMot.speBlo.J
chi.simMot.speBlo.P
chi.simMot.speBlo.feedback.y
chi.simMot.speBlo.gain.k
chi.simMot.speBlo.gain.y
chi.simMot.speBlo.integrator.k
chi.simMot.speBlo.integrator.use_reset
chi.simMot.speBlo.integrator.use_set
chi.simMot.speBlo.integrator.initType
chi.simMot.speBlo.integrator.y_start
chi.simMot.speBlo.integrator.local_reset
chi.simMot.speBlo.integrator.local_set
chi.simMot.speBlo.gain1.k
chi.simMot.integrator.k
chi.simMot.integrator.use_reset
chi.simMot.integrator.use_set
chi.simMot.integrator.initType
chi.simMot.integrator.y_start
chi.simMot.integrator.u
chi.simMot.integrator.y
chi.simMot.integrator.der(y)
chi.simMot.integrator.local_reset
chi.simMot.integrator.local_set
chi.simMot.torSpe.P
chi.simMot.torSpe.J
chi.simMot.torSpe.Lr
chi.simMot.torSpe.Ls
chi.simMot.torSpe.Rr
chi.simMot.torSpe.Lm
chi.simMot.torSpe.Rs
chi.simMot.torSpe.motMod.Lr
chi.simMot.torSpe.motMod.Ls
chi.simMot.torSpe.motMod.Rr
chi.simMot.torSpe.motMod.Lm
chi.simMot.torSpe.motMod.Rs
chi.simMot.torSpe.motMod.i_qr_block.Lr
chi.simMot.torSpe.motMod.i_qr_block.Rr
chi.simMot.torSpe.motMod.i_qr_block.Lm
chi.simMot.torSpe.motMod.i_qr_block.der_i_qs
chi.simMot.torSpe.motMod.i_qr_block.der_i_qr
chi.simMot.torSpe.motMod.int_qr.k
chi.simMot.torSpe.motMod.int_qr.use_reset
chi.simMot.torSpe.motMod.int_qr.use_set
chi.simMot.torSpe.motMod.int_qr.initType
chi.simMot.torSpe.motMod.int_qr.y_start
chi.simMot.torSpe.motMod.int_qr.y
chi.simMot.torSpe.motMod.int_qr.der(y)
chi.simMot.torSpe.motMod.int_qr.local_reset
chi.simMot.torSpe.motMod.int_qr.local_set
chi.simMot.torSpe.motMod.i_dr_block.Lr
chi.simMot.torSpe.motMod.i_dr_block.Rr
chi.simMot.torSpe.motMod.i_dr_block.Lm
chi.simMot.torSpe.motMod.i_dr_block.der_i_ds
chi.simMot.torSpe.motMod.i_dr_block.der_i_dr
chi.simMot.torSpe.motMod.int_dr.k
chi.simMot.torSpe.motMod.int_dr.use_reset
chi.simMot.torSpe.motMod.int_dr.use_set
chi.simMot.torSpe.motMod.int_dr.initType
chi.simMot.torSpe.motMod.int_dr.y_start
chi.simMot.torSpe.motMod.int_dr.y
chi.simMot.torSpe.motMod.int_dr.der(y)
chi.simMot.torSpe.motMod.int_dr.local_reset
chi.simMot.torSpe.motMod.int_dr.local_set
chi.simMot.torSpe.motMod.v_dr.k
chi.simMot.torSpe.motMod.i_qs_block.Lr
chi.simMot.torSpe.motMod.i_qs_block.Rr
chi.simMot.torSpe.motMod.i_qs_block.Lm
chi.simMot.torSpe.motMod.i_qs_block.Rs
chi.simMot.torSpe.motMod.i_qs_block.Ls
chi.simMot.torSpe.motMod.int_qs.k
chi.simMot.torSpe.motMod.int_qs.use_reset
chi.simMot.torSpe.motMod.int_qs.use_set
chi.simMot.torSpe.motMod.int_qs.initType
chi.simMot.torSpe.motMod.int_qs.y_start
chi.simMot.torSpe.motMod.int_qs.y
chi.simMot.torSpe.motMod.int_qs.der(y)
chi.simMot.torSpe.motMod.int_qs.local_reset
chi.simMot.torSpe.motMod.int_qs.local_set
chi.simMot.torSpe.motMod.i_ds_block.Lr
chi.simMot.torSpe.motMod.i_ds_block.Rr
chi.simMot.torSpe.motMod.i_ds_block.Lm
chi.simMot.torSpe.motMod.i_ds_block.Rs
chi.simMot.torSpe.motMod.i_ds_block.Ls
chi.simMot.torSpe.motMod.int_ds.k
chi.simMot.torSpe.motMod.int_ds.use_reset
chi.simMot.torSpe.motMod.int_ds.use_set
chi.simMot.torSpe.motMod.int_ds.initType
chi.simMot.torSpe.motMod.int_ds.y_start
chi.simMot.torSpe.motMod.int_ds.y
chi.simMot.torSpe.motMod.int_ds.der(y)
chi.simMot.torSpe.motMod.int_ds.local_reset
chi.simMot.torSpe.motMod.int_ds.local_set
chi.simMot.torSpe.motMod.v_qr.k
chi.simMot.torSpe.torBlo.P
chi.simMot.torSpe.torBlo.Lm
chi.simMot.torSpe.torBlo.J
chi.simMot.torSpe.volCon.V_rms
chi.simMot.torSpe.volCon.v_qs
chi.simMot.torSpe.volCon.v_ds
chi.simMot.torSpe.frequencyConversion.f
chi.simMot.torSpe.frequencyConversion.omega
chi.simMot.speed.useSupport
chi.simMot.speed.phi_support
chi.simMot.speed.exact
chi.simMot.speed.f_crit
chi.simMot.speed.phi
chi.simMot.speed.der(phi)
chi.simMot.speed.a
chi.simMot.speed.w_crit
chi.simMot.VFD_Equivalent_Freq.k
chi.simMot.VFD_Equivalent_Freq.y
chi.simMot.VFD.y
chi.simMot.VFD.controlError
chi.simMot.VFD.controllerType
chi.simMot.VFD.k
chi.simMot.VFD.Ti
chi.simMot.VFD.Td
chi.simMot.VFD.yMax
chi.simMot.VFD.yMin
chi.simMot.VFD.wp
chi.simMot.VFD.wd
chi.simMot.VFD.Ni
chi.simMot.VFD.Nd
chi.simMot.VFD.initType
chi.simMot.VFD.xi_start
chi.simMot.VFD.xd_start
chi.simMot.VFD.y_start
chi.simMot.VFD.strict
chi.simMot.VFD.reverseActing
chi.simMot.VFD.reset
chi.simMot.VFD.y_reset
chi.simMot.VFD.addP.y
chi.simMot.VFD.addP.k1
chi.simMot.VFD.addP.k2
chi.simMot.VFD.P.k
chi.simMot.VFD.P.y
chi.simMot.VFD.addPID.k1
chi.simMot.VFD.addPID.k2
chi.simMot.VFD.addPID.k3
chi.simMot.VFD.addPID.u2
chi.simMot.VFD.addPID.y
chi.simMot.VFD.unitTime
chi.simMot.VFD.revAct
chi.simMot.VFD.with_I
chi.simMot.VFD.with_D
chi.simMot.VFD.Dzero.k
chi.simMot.VFD.Dzero.y
chi.simMot.VFD.y_reset_internal
chi.simMot.VFD.addI.k1
chi.simMot.VFD.addI.k2
chi.simMot.VFD.addI.k3
chi.simMot.VFD.addI.u3
chi.simMot.VFD.addI.y
chi.simMot.VFD.addSat.y
chi.simMot.VFD.addSat.k1
chi.simMot.VFD.addSat.k2
chi.simMot.VFD.gainPID.k
chi.simMot.VFD.gainPID.y
chi.simMot.VFD.gainTrack.k
chi.simMot.VFD.limiter.uMax
chi.simMot.VFD.limiter.uMin
chi.simMot.VFD.limiter.strict
chi.simMot.VFD.limiter.limitsAtInit
chi.simMot.VFD.I.y
chi.simMot.VFD.I.der(y)
chi.simMot.VFD.I.k
chi.simMot.VFD.I.initType
chi.simMot.VFD.I.y_start
chi.simMot.VFD.I.reset
chi.simMot.VFD.I.y_reset
chi.simMot.VFD.I.y_reset_internal
chi.simMot.VFD.I.trigger_internal
chi.simMot.switch1.u3
chi.COP_is_for_cooling
chi.TUseAct_nominal
chi.cp1_default
chi.cp2_default
TEva_in.height
TEva_in.duration
TEva_in.offset
TEva_in.startTime
CPUtime
EventCounter
NonlinearSystems.initialization[1].Calls
NonlinearSystems.initialization[1].Residues
NonlinearSystems.initialization[1].Iterations
NonlinearSystems.initialization[1].Jacobians
NonlinearSystems.simulation[1].Calls
NonlinearSystems.simulation[1].Residues
NonlinearSystems.simulation[1].Iterations
NonlinearSystems.simulation[1].Jacobians

double initialValue(719,6)
  0   10000                       0                       0                
  6   256   # P_nominal
 -1     -10                       0                       0                
  1   280   # dTEva_nominal
 -1      10                       0                       0                
  1   280   # dTCon_nominal
 -1       3                       0                       0                
  1   280   # COP_nominal
  0       0                       0                       0                
  6   256   # m2_flow_nominal
  0       0                       0                       0                
  6   256   # m1_flow_nominal
  0       1                       0                       0                
  6   258   # sou1.nPorts
  0       0                       0                       0                
  6   257   # sou1.verifyInputs
  0  3.0000000000000000E+05       0                  1.0000000000000000E+08
  6   260   # sou1.ports[1].p
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # sou1.ports[1].h_outflow
  0       3                       1                       3                
  6  1282   # sou1.flowDirection
  0       0                       0                       0                
  6  1280   # sou1.X_in_internal[1]
  0       0                       0                       0                
  6   769   # sou1.use_X_in
  0       0                       0                       0                
  6   769   # sou1.use_Xi_in
  0       0                       0                       0                
  6   769   # sou1.use_C_in
 -1       1                       0                       1                
  1   280   # sou1.X[1]
  0       0                       0                       0                
  6   769   # sou1.use_m_flow_in
  0       0                 -100000                  100000                
  6   256   # sou1.m_flow
  0       1                       0                       0                
  6   769   # sou1.use_T_in
 -1  2.9814999999999998E+02       1                   10000                
  1   280   # sou1.T
  0       0                       0                       0                
  6  1280   # sou1.T_in_internal
 -1       0                       0                       0                
  1   280   # TCon_in.height
 -1      60                       0                 1.0000000000000000E+100
  1   280   # TCon_in.duration
 -1  2.9114999999999998E+02       0                       0                
  1   280   # TCon_in.offset
 -1       0                       0                       0                
  1   280   # TCon_in.startTime
  0       1                       0                       0                
  6   258   # sou2.nPorts
  0       0                       0                       0                
  6   257   # sou2.verifyInputs
  0  3.0000000000000000E+05       0                  1.0000000000000000E+08
  6   260   # sou2.ports[1].p
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # sou2.ports[1].h_outflow
  0       3                       1                       3                
  6  1282   # sou2.flowDirection
  0       0                       0                       0                
  6  1280   # sou2.X_in_internal[1]
  0       0                       0                       0                
  6   769   # sou2.use_X_in
  0       0                       0                       0                
  6   769   # sou2.use_Xi_in
  0       0                       0                       0                
  6   769   # sou2.use_C_in
 -1       1                       0                       1                
  1   280   # sou2.X[1]
  0       0                       0                       0                
  6   769   # sou2.use_m_flow_in
  0       0                 -100000                  100000                
  6   256   # sou2.m_flow
  0       1                       0                       0                
  6   769   # sou2.use_T_in
 -1  2.9814999999999998E+02       1                   10000                
  1   280   # sou2.T
  0       0                       0                       0                
  6  1280   # sou2.T_in_internal
  0       0                       0                       0                
  6   260   # Sou.terminal.v[1]
  0       0                       0                       0                
  6   260   # Sou.terminal.v[2]
  0       0                       0                       0                
  6   388   # Sou.terminal.i[1]
  0       0                       0                       0                
  6   388   # Sou.terminal.i[2]
 -1      50                       0                       0                
  1   280   # Sou.f
 -1     400                       0                       0                
  1   280   # Sou.V
 -1       0                       0                       0                
  1   280   # Sou.phiSou
  0       0                       0                       0                
  6   260   # Sou.P.real
  0       0                       0                       0                
  6   260   # Sou.P.apparent
  0       0                       0                       0                
  6   260   # Sou.P.phi
  0       0                       0                       0                
  6   260   # Sou.P.cosPhi
  0       1                       0                       0                
  6   257   # Sou.sou.potentialReference
  0       1                       0                       0                
  6   257   # Sou.sou.definiteReference
  0       0                       0                       0                
  6   256   # Sou.sou.S[2]
  0      60                       0                       0                
  6   256   # Sou.sou.f
  0     480                       0                       0                
  6   256   # Sou.sou.V
  0       0                       0                       0                
  6   256   # Sou.sou.phiSou
  0       0                       0                       0                
  6  1280   # Sou.sou.thetaRel
  0       1                       0                       0                
  6   257   # senTem.allowFlowReversal
  0   83680                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # senTem.port_a.h_outflow
  0   83680                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # senTem.port_b.h_outflow
  0       0                       0                 1.0000000000000000E+100
  6   256   # senTem.m_flow_nominal
  0       0                       0                 1.0000000000000000E+100
  6   256   # senTem.m_flow_small
  0       1                       0                 1.0000000000000000E+100
  6   256   # senTem.tau
  0       3                       1                       4                
  6   258   # senTem.initType
  0       1                       0                       0                
  6  1280   # senTem.k
  0       1                       0                       0                
  6  1281   # senTem.dynamic
  0       0                       0                       0                
  6  1280   # senTem.mNor_flow
  0       1                       0                       0                
  6  1280   # senTem.tauInv
 -1       0                       0                 1.0000000000000000E+100
  2   272   # senTem.T
  0       0                       0                       0                
  3   256   # senTem.der(T)
 -1  2.9314999999999998E+02       0                 1.0000000000000000E+100
  1   280   # senTem.T_start
  0       0                       0                       0                
  6   257   # senTem.transferHeat
 -1  2.9314999999999998E+02       0                 1.0000000000000000E+100
  1   280   # senTem.TAmb
 -1    1200                       1                 1.0000000000000000E+100
  1   280   # senTem.tauHeaTra
  0       0                       0                       0                
  6  1280   # senTem.tauHeaTraInv
  0       0                       0                       0                
  6  1280   # senTem.ratTau
  0     300                       1                   10000                
  6  1280   # senTem.TMed
  0  2.9314999999999998E+02       1                   10000                
  6  1280   # senTem.T_a_inflow
  0  2.9314999999999998E+02       1                   10000                
  6  1280   # senTem.T_b_inflow
 -1      -2                       0                       0                
  1   280   # TSet.height
  0       0                       0                       0                
  6   320   # TSet.y
 -1  2.8514999999999998E+02       0                       0                
  1   280   # TSet.offset
 -1     500                       0                       0                
  1   280   # TSet.startTime
  0       1                       0                       0                
  6   258   # sin2.nPorts
  0       0                       0                       0                
  6   257   # sin2.verifyInputs
  0       3                       1                       3                
  6  1282   # sin2.flowDirection
  0       0                       0                       0                
  6  1280   # sin2.X_in_internal[1]
  0       0                       0                       0                
  6   769   # sin2.use_X_in
  0       0                       0                       0                
  6   769   # sin2.use_Xi_in
  0       0                       0                       0                
  6   769   # sin2.use_C_in
 -1       1                       0                       1                
  1   280   # sin2.X[1]
  0       0                       0                       0                
  6   769   # sin2.use_p_in
 -1  3.0000000000000000E+05       0                  1.0000000000000000E+08
  1   280   # sin2.p
  0       0                       0                       0                
  6   769   # sin2.use_T_in
 -1  2.9314999999999998E+02       1                   10000                
  1   280   # sin2.T
  0       1                       0                       0                
  6  1281   # sin2.checkWaterPressure
  0       0                       0                       0                
  6  1281   # sin2.checkAirPressure
  0       1                       0                       0                
  6   258   # sin1.nPorts
  0       0                       0                       0                
  6   257   # sin1.verifyInputs
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # sin1.ports[1].h_outflow
  0       3                       1                       3                
  6  1282   # sin1.flowDirection
  0       0                       0                       0                
  6  1280   # sin1.X_in_internal[1]
  0       0                       0                       0                
  6   769   # sin1.use_X_in
  0       0                       0                       0                
  6   769   # sin1.use_Xi_in
  0       0                       0                       0                
  6   769   # sin1.use_C_in
 -1       1                       0                       1                
  1   280   # sin1.X[1]
  0       0                       0                       0                
  6   769   # sin1.use_p_in
 -1  3.0000000000000000E+05       0                  1.0000000000000000E+08
  1   280   # sin1.p
  0       0                       0                       0                
  6   769   # sin1.use_T_in
 -1  2.9314999999999998E+02       1                   10000                
  1   280   # sin1.T
  0       1                       0                       0                
  6  1281   # sin1.checkWaterPressure
  0       0                       0                       0                
  6  1281   # sin1.checkAirPressure
  0       1                       0                       0                
  6   257   # chi.allowFlowReversal1
  0       1                       0                       0                
  6   257   # chi.allowFlowReversal2
  0   83680                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # chi.port_a1.h_outflow
  0   83680                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # chi.port_b1.h_outflow
  0   83680                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # chi.port_a2.h_outflow
  0  1.3769614953517504E+00       0                 1.0000000000000000E+100
  6   256   # chi.m1_flow_nominal
  0  1.1379557592140830E+00       0                 1.0000000000000000E+100
  6   256   # chi.m2_flow_nominal
  0  1.3769614953517505E-04       0                  100000                
  6   256   # chi.m1_flow_small
  0  1.1379557592140831E-04       0                  100000                
  6   256   # chi.m2_flow_small
  0       0                       0                       0                
  6   769   # chi.show_T
  0       0                       0                       0                
  6   256   # chi.dp1
  0       0                       0                       0                
  6   256   # chi.dp2
  0  2.9314999999999998E+02       1                   10000                
  6  1280   # chi.state_a1_inflow.T
  0  2.9314999999999998E+02       1                   10000                
  6  1280   # chi.state_b1_inflow.T
  0  2.9314999999999998E+02       1                   10000                
  6  1280   # chi.state_a2_inflow.T
  0  2.9314999999999998E+02       1                   10000                
  6  1280   # chi.state_b2_inflow.T
  0 -4.7612068965517239E+04 -1.0000000000000000E+100       0                
  6   256   # chi.QEva_flow_nominal
  0  5.7612068965517239E+04       0                 1.0000000000000000E+100
  6   256   # chi.QCon_flow_nominal
  0     -10                 -1.0000000000000000E+100       0                
  6   256   # chi.dTEva_nominal
  0      10                       0                 1.0000000000000000E+100
  6   256   # chi.dTCon_nominal
  0   10000                       0                 1.0000000000000000E+100
  6   256   # chi.P_nominal
 -1    1800                       0                       0                
  1   280   # chi.Nrpm_nominal
  0    1000                       0                       0                
  6   256   # chi.dp1_nominal
  0    1000                       0                       0                
  6   256   # chi.dp2_nominal
 -1       1                       0                       0                
  1   281   # chi.use_eta_Carnot_nominal
  0  5.0000000000000000E-01       0                       0                
  6   256   # chi.etaCarnot_nominal
  0  4.7612068965517240E+00       0                       0                
  6   256   # chi.COP_nominal
  0  3.0314999999999998E+02       0                 1.0000000000000000E+100
  6   256   # chi.TCon_nominal
  0  2.7814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # chi.TEva_nominal
  0       1                       0                       0                
  6   256   # chi.a[1]
  0       2                       0                 1.0000000000000000E+100
  6   256   # chi.TAppCon_nominal
  0       2                       0                 1.0000000000000000E+100
  6   256   # chi.TAppEva_nominal
 -1       4                       0                       0                
  1   282   # chi.per.P
 -1  1.3100000000000001E-02       0                       0                
  1   280   # chi.per.J
 -1  1.7803900000000000E-01       0                       0                
  1   280   # chi.per.Lr
 -1  1.7803900000000000E-01       0                       0                
  1   280   # chi.per.Ls
 -1  1.7219999999999999E-01       0                       0                
  1   280   # chi.per.Lm
 -1  1.4050000000000000E+00       0                       0                
  1   280   # chi.per.Rs
 -1  1.3950000000000000E+00       0                       0                
  1   280   # chi.per.Rr
 -1      50                       0                       0                
  1   280   # chi.per.Freq
 -1     400                       0                       0                
  1   280   # chi.per.Voltage
  0       0                       0                       0                
  6   258   # chi.P
  0       0                       0                       0                
  6   256   # chi.J
 -1  1.4580000000000001E-01       0                       0                
  1   280   # chi.Lr
 -1  1.4570000000000000E-01       0                       0                
  1   280   # chi.Ls
 -1  1.4060000000000000E-01       0                       0                
  1   280   # chi.Lm
 -1  1.1450000000000000E+00       0                       0                
  1   280   # chi.Rr
 -1       1                       0                       0                
  1   280   # chi.Rs
 -1       1                       0                       0                
  1   281   # chi.have_controller
 -1       2                       1                       4                
  1   282   # chi.controllerType
 -1       1                       0                 1.0000000000000000E+100
  1   280   # chi.k
 -1  5.0000000000000000E-01  9.9999999999999997E-61 1.0000000000000000E+100
  1   280   # chi.Ti
 -1  1.0000000000000001E-01       0                 1.0000000000000000E+100
  1   280   # chi.Td
 -1       1                       0                       0                
  1   280   # chi.yMax
 -1       0                       0                       0                
  1   280   # chi.yMin
  0       1                       0                       0                
  6   257   # chi.mecChi.allowFlowReversal1
  0       1                       0                       0                
  6   257   # chi.mecChi.allowFlowReversal2
  0  1.3769614953517504E+00       0                 1.0000000000000000E+100
  6   256   # chi.mecChi.m1_flow_nominal
  0  1.1379557592140830E+00       0                 1.0000000000000000E+100
  6   256   # chi.mecChi.m2_flow_nominal
  0  1.3769614953517505E-04       0                  100000                
  6   256   # chi.mecChi.m1_flow_small
  0  1.1379557592140831E-04       0                  100000                
  6   256   # chi.mecChi.m2_flow_small
  0       0                       0                       0                
  6   769   # chi.mecChi.show_T
  0       0                       0                       0                
  6   256   # chi.mecChi.dp1
  0       0                       0                       0                
  6   256   # chi.mecChi.dp2
  0  2.9314999999999998E+02       1                   10000                
  6  1280   # chi.mecChi.state_a1_inflow.T
  0  2.9314999999999998E+02       1                   10000                
  6  1280   # chi.mecChi.state_b1_inflow.T
  0  2.9314999999999998E+02       1                   10000                
  6  1280   # chi.mecChi.state_a2_inflow.T
  0  2.9314999999999998E+02       1                   10000                
  6  1280   # chi.mecChi.state_b2_inflow.T
  0 -4.7612068965517239E+04 -1.0000000000000000E+100       0                
  6   256   # chi.mecChi.QEva_flow_nominal
  0  5.7612068965517239E+04       0                 1.0000000000000000E+100
  6   256   # chi.mecChi.QCon_flow_nominal
  0     -10                 -1.0000000000000000E+100       0                
  6   256   # chi.mecChi.dTEva_nominal
  0      10                       0                 1.0000000000000000E+100
  6   256   # chi.mecChi.dTCon_nominal
  0   10000                       0                 1.0000000000000000E+100
  6   256   # chi.mecChi.P_nominal
  0    1000                       0                       0                
  6   256   # chi.mecChi.dp1_nominal
  0    1000                       0                       0                
  6   256   # chi.mecChi.dp2_nominal
  0       0                       0                       0                
  6   256   # chi.mecChi.Nrpm_nominal
 -1       1                       0                 1.0000000000000000E+100
  1   280   # chi.mecChi.loaIne
  0       0                       0                       0                
  6   257   # chi.mecChi.use_eta_Carnot_nominal
  0  5.0000000000000000E-01       0                       0                
  6   256   # chi.mecChi.etaCarnot_nominal
  0  4.7612068965517240E+00       0                       0                
  6   256   # chi.mecChi.COP_nominal
  0  3.0314999999999998E+02       0                 1.0000000000000000E+100
  6   256   # chi.mecChi.TCon_nominal
  0  2.7814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # chi.mecChi.TEva_nominal
  0       1                       0                       0                
  6   256   # chi.mecChi.a[1]
  0       2                       0                 1.0000000000000000E+100
  6   256   # chi.mecChi.TAppCon_nominal
  0       2                       0                 1.0000000000000000E+100
  6   256   # chi.mecChi.TAppEva_nominal
  0       0                       0                       0                
  6   256   # chi.mecChi.tauChi
  0       1                       0                       0                
  6   257   # chi.mecChi.chi.allowFlowReversal1
  0       1                       0                       0                
  6   257   # chi.mecChi.chi.allowFlowReversal2
  0  1.3769614953517504E+00       0                 1.0000000000000000E+100
  6   256   # chi.mecChi.chi.m1_flow_nominal
  0  1.1379557592140830E+00       0                 1.0000000000000000E+100
  6   256   # chi.mecChi.chi.m2_flow_nominal
  0  1.3769614953517505E-04       0                  100000                
  6   256   # chi.mecChi.chi.m1_flow_small
  0  1.1379557592140831E-04       0                  100000                
  6   256   # chi.mecChi.chi.m2_flow_small
  0       0                       0                       0                
  6   769   # chi.mecChi.chi.show_T
  0       0                       0                       0                
  6   256   # chi.mecChi.chi.dp1
  0       0                       0                       0                
  6   256   # chi.mecChi.chi.dp2
  0  2.9314999999999998E+02       1                   10000                
  6  1280   # chi.mecChi.chi.state_a1_inflow.T
  0  2.9314999999999998E+02       1                   10000                
  6  1280   # chi.mecChi.chi.state_b1_inflow.T
  0  2.9314999999999998E+02       1                   10000                
  6  1280   # chi.mecChi.chi.state_a2_inflow.T
  0  2.9314999999999998E+02       1                   10000                
  6  1280   # chi.mecChi.chi.state_b2_inflow.T
  0       1                       0                       0                
  6   769   # chi.mecChi.chi.homotopyInitialization
  0 -4.7612068965517239E+04 -1.0000000000000000E+100       0                
  6   256   # chi.mecChi.chi.QEva_flow_nominal
  0  5.7612068965517239E+04       0                 1.0000000000000000E+100
  6   256   # chi.mecChi.chi.QCon_flow_nominal
  0     -10                 -1.0000000000000000E+100       0                
  6   256   # chi.mecChi.chi.dTEva_nominal
  0      10                       0                 1.0000000000000000E+100
  6   256   # chi.mecChi.chi.dTCon_nominal
  0       0                       0                       0                
  6   257   # chi.mecChi.chi.use_eta_Carnot_nominal
  0  5.0000000000000000E-01       0                       0                
  6   256   # chi.mecChi.chi.etaCarnot_nominal
  0  4.7612068965517240E+00       0                       0                
  6   256   # chi.mecChi.chi.COP_nominal
  0  3.0314999999999998E+02       0                 1.0000000000000000E+100
  6   256   # chi.mecChi.chi.TCon_nominal
  0  2.7814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # chi.mecChi.chi.TEva_nominal
  0       1                       0                       0                
  6   256   # chi.mecChi.chi.a[1]
  0    1000                       0                       0                
  6   256   # chi.mecChi.chi.dp1_nominal
  0    1000                       0                       0                
  6   256   # chi.mecChi.chi.dp2_nominal
  0       2                       0                 1.0000000000000000E+100
  6   256   # chi.mecChi.chi.TAppCon_nominal
  0       2                       0                 1.0000000000000000E+100
  6   256   # chi.mecChi.chi.TAppEva_nominal
  0       0                       0                       0                
  6   257   # chi.mecChi.chi.from_dp1
  0       0                       0                       0                
  6   257   # chi.mecChi.chi.from_dp2
  0       0                       0                       0                
  6   257   # chi.mecChi.chi.linearizeFlowResistance1
  0       0                       0                       0                
  6   257   # chi.mecChi.chi.linearizeFlowResistance2
  0  1.0000000000000001E-01       0                       0                
  6   256   # chi.mecChi.chi.deltaM1
  0  1.0000000000000001E-01       0                       0                
  6   256   # chi.mecChi.chi.deltaM2
 -1      60                       0                       0                
  1   280   # chi.mecChi.chi.tau1
 -1      60                       0                       0                
  1   280   # chi.mecChi.chi.tau2
 -1  2.9314999999999998E+02       0                 1.0000000000000000E+100
  1   280   # chi.mecChi.chi.T1_start
 -1  2.9314999999999998E+02       0                 1.0000000000000000E+100
  1   280   # chi.mecChi.chi.T2_start
  0       4                       1                       4                
  6   258   # chi.mecChi.chi.energyDynamics
  0       0                       0                 1.0000000000000000E+100
  6   256   # chi.mecChi.chi.yPL
  0       1                       0                       0                
  6   256   # chi.mecChi.chi.etaPL
  0       0                       0                 1.0000000000000000E+100
  6   256   # chi.mecChi.chi.COP
  0       0                       0                 1.0000000000000000E+100
  6   256   # chi.mecChi.chi.COPCar
  0  3.0514999999999998E+02       0                 1.0000000000000000E+100
  6   256   # chi.mecChi.chi.TConAct
  0  2.7614999999999998E+02       0                 1.0000000000000000E+100
  6   256   # chi.mecChi.chi.TEvaAct
  0       1                       0                       0                
  6  1281   # chi.mecChi.chi.COP_is_for_cooling
  0  5.0000000000000000E-01       0                       0                
  6  1280   # chi.mecChi.chi.etaCarnot_nominal_internal
  0       0                       0                       0                
  6  1281   # chi.mecChi.chi.evaluate_etaPL
  0  2.7614999999999998E+02       0                 1.0000000000000000E+100
  6  1280   # chi.mecChi.chi.TUseAct_nominal
  0    4184                       0                       0                
  6  1280   # chi.mecChi.chi.cp1_default
  0    4184                       0                       0                
  6  1280   # chi.mecChi.chi.cp2_default
  0  2.9314999999999998E+02       1                   10000                
  6  1280   # chi.mecChi.chi.staA1.T
  0  2.9314999999999998E+02       1                   10000                
  6  1280   # chi.mecChi.chi.staB1.T
  0  2.9314999999999998E+02       1                   10000                
  6  1280   # chi.mecChi.chi.staA2.T
  0  2.9314999999999998E+02       1                   10000                
  6  1280   # chi.mecChi.chi.staB2.T
  0       1                       0                       0                
  6  1281   # chi.mecChi.chi.con.allowFlowReversal
  0  1.3769614953517504E+00       0                       0                
  6  1280   # chi.mecChi.chi.con.m_flow_nominal
  0  1.3769614953517505E-04       0                 1.0000000000000000E+100
  6  1280   # chi.mecChi.chi.con.m_flow_small
  0       0                       0                       0                
  6   769   # chi.mecChi.chi.con.show_T
  0       0                       0                       0                
  6  1280   # chi.mecChi.chi.con.dp
  0       0                       0                       0                
  6  1280   # chi.mecChi.chi.con._m_flow_start
  0       0                       0                       0                
  6  1280   # chi.mecChi.chi.con._dp_start
  0       1                       0                       0                
  6  1281   # chi.mecChi.chi.con.computeFlowResistance
  0       0                       0                       0                
  6  1281   # chi.mecChi.chi.con.from_dp
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # chi.mecChi.chi.con.dp_nominal
  0       0                       0                       0                
  6  1281   # chi.mecChi.chi.con.linearizeFlowResistance
  0  1.0000000000000001E-01       0                       0                
  6  1280   # chi.mecChi.chi.con.deltaM
  0       1                       0                       0                
  6   769   # chi.mecChi.chi.con.homotopyInitialization
  0       0                       0                       0                
  6  1280   # chi.mecChi.chi.con.tau
  0       4                       1                       4                
  6  1282   # chi.mecChi.chi.con.energyDynamics
 -1  3.0000000000000000E+05       0                  1.0000000000000000E+08
  1  1304   # chi.mecChi.chi.con.p_start
  0  2.9314999999999998E+02       1                   10000                
  6  1280   # chi.mecChi.chi.con.T_start
 -1       1                       0                       1                
  1  1304   # chi.mecChi.chi.con.X_start[1]
  0       4                       1                       4                
  6  1282   # chi.mecChi.chi.con.vol.energyDynamics
  0       4                       1                       4                
  6  1282   # chi.mecChi.chi.con.vol.massDynamics
  0       4                       1                       4                
  6  1282   # chi.mecChi.chi.con.vol.substanceDynamics
  0       4                       1                       4                
  6  1282   # chi.mecChi.chi.con.vol.traceDynamics
  0  3.0000000000000000E+05       0                  1.0000000000000000E+08
  6  1280   # chi.mecChi.chi.con.vol.p_start
  0  2.9314999999999998E+02       1                   10000                
  6  1280   # chi.mecChi.chi.con.vol.T_start
  0       0                       0                       1                
  6  1280   # chi.mecChi.chi.con.vol.X_start[1]
  0       1                       1                 1.0000000000000000E+100
  6  1280   # chi.mecChi.chi.con.vol.mSenFac
  0       0                       0                       0                
  6  1281   # chi.mecChi.chi.con.vol.wrongEnergyMassBalanceConfiguration
  0       0                       0                       0                
  6   769   # chi.mecChi.chi.con.vol.initialize_p
  0       1                       0                       0                
  6  1281   # chi.mecChi.chi.con.vol.prescribedHeatFlowRate
  0       1                       0                       0                
  6  1281   # chi.mecChi.chi.con.vol.simplify_mWat_flow
  0  1.3769614953517504E+00       0                 1.0000000000000000E+100
  6  1280   # chi.mecChi.chi.con.vol.m_flow_nominal
  0       2                       0                       0                
  6  1282   # chi.mecChi.chi.con.vol.nPorts
  0  1.3769614953517505E-04       0                 1.0000000000000000E+100
  6  1280   # chi.mecChi.chi.con.vol.m_flow_small
  0       1                       0                       0                
  6  1281   # chi.mecChi.chi.con.vol.allowFlowReversal
  0       0                       0                       0                
  6  1280   # chi.mecChi.chi.con.vol.V
  0     300                       1                   10000                
  6  1280   # chi.mecChi.chi.con.vol.T
  0       0                       0                       0                
  6  1280   # chi.mecChi.chi.con.vol.U
  0       0                       0                       0                
  6  1280   # chi.mecChi.chi.con.vol.m
  0  9.9558600000000001E+02       0                 1.0000000000000000E+100
  6  1280   # chi.mecChi.chi.con.vol.rho_start
  0  3.0000000000000000E+05       0                  1.0000000000000000E+08
  6  1280   # chi.mecChi.chi.con.vol.state_default.p
  0  2.9314999999999998E+02       1                   10000                
  6  1280   # chi.mecChi.chi.con.vol.state_default.T
  0  9.9558600000000001E+02       0                 1.0000000000000000E+100
  6  1280   # chi.mecChi.chi.con.vol.rho_default
  0  3.0000000000000000E+05       0                  1.0000000000000000E+08
  6  1280   # chi.mecChi.chi.con.vol.state_start.p
  0  2.9314999999999998E+02       1                   10000                
  6  1280   # chi.mecChi.chi.con.vol.state_start.T
  0       1                       0                       0                
  6  1281   # chi.mecChi.chi.con.vol.useSteadyStateTwoPort
  0       0                       0                       0                
  6  1280   # chi.mecChi.chi.con.vol.hOut_internal
  0       0                       0                       0                
  6  1281   # chi.mecChi.chi.con.vol.use_C_flow
  0       1                       0                       0                
  6  1281   # chi.mecChi.chi.con.vol.steBal.allowFlowReversal
  0  1.3769614953517504E+00       0                       0                
  6  1280   # chi.mecChi.chi.con.vol.steBal.m_flow_nominal
  0  1.3769614953517505E-04       0                 1.0000000000000000E+100
  6  1280   # chi.mecChi.chi.con.vol.steBal.m_flow_small
  0       0                       0                       0                
  6   769   # chi.mecChi.chi.con.vol.steBal.show_T
  0       0                       0                       0                
  6  1280   # chi.mecChi.chi.con.vol.steBal.dp
  0       0                       0                       0                
  6  1280   # chi.mecChi.chi.con.vol.steBal._m_flow_start
  0       0                       0                       0                
  6  1280   # chi.mecChi.chi.con.vol.steBal._dp_start
  0       1                       0                       0                
  6  1281   # chi.mecChi.chi.con.vol.steBal.simplify_mWat_flow
  0       1                       0                       0                
  6  1281   # chi.mecChi.chi.con.vol.steBal.prescribedHeatFlowRate
  0       0                       0                       0                
  6  1281   # chi.mecChi.chi.con.vol.steBal.use_mWat_flow
  0       0                       0                       0                
  6  1281   # chi.mecChi.chi.con.vol.steBal.use_C_flow
  0       1                       0                       0                
  6  1281   # chi.mecChi.chi.con.vol.steBal.use_m_flowInv
  0       0                       0                       0                
  6  1280   # chi.mecChi.chi.con.vol.steBal.m_flowInv
  0  1.3769614953517503E-07       0                       0                
  6  1280   # chi.mecChi.chi.con.vol.steBal.deltaReg
  0  7.2623672003591210E+06       0                       0                
  6  1280   # chi.mecChi.chi.con.vol.steBal.deltaInvReg
  0 -1.0893550800538681E+08       0                       0                
  6  1280   # chi.mecChi.chi.con.vol.steBal.aReg
  0  6.2762953049893850E+15       0                       0                
  6  1280   # chi.mecChi.chi.con.vol.steBal.bReg
  0 -1.3827440991380629E+23       0                       0                
  6  1280   # chi.mecChi.chi.con.vol.steBal.cReg
  0  1.4854364374973929E+30       0                       0                
  6  1280   # chi.mecChi.chi.con.vol.steBal.dReg
  0 -7.6767008380557296E+36       0                       0                
  6  1280   # chi.mecChi.chi.con.vol.steBal.eReg
  0  1.5258173996893662E+43       0                       0                
  6  1280   # chi.mecChi.chi.con.vol.steBal.fReg
  0  3.0000000000000000E+05       0                  1.0000000000000000E+08
  6  1280   # chi.mecChi.chi.con.vol.steBal.state_default.p
  0  2.9314999999999998E+02       1                   10000                
  6  1280   # chi.mecChi.chi.con.vol.steBal.state_default.T
  0    4184                       0                       0                
  6  1280   # chi.mecChi.chi.con.vol.steBal.cp_default
  0     200                       1                 1.0000000000000000E+100
  6  1280   # chi.mecChi.chi.con.vol.steBal.dTMax
  0       0                       0                       0                
  6  1280   # chi.mecChi.chi.con.vol.steBal.mWat_flow_internal
  0       1                       0                       0                
  6  1281   # chi.mecChi.chi.con.preDro.allowFlowReversal
  0  1.3769614953517504E+00       0                       0                
  6  1280   # chi.mecChi.chi.con.preDro.m_flow_nominal
  0  1.3769614953517505E-04       0                 1.0000000000000000E+100
  6  1280   # chi.mecChi.chi.con.preDro.m_flow_small
  0       0                       0                       0                
  6   769   # chi.mecChi.chi.con.preDro.show_T
  0       0                       0                       0                
  6  1280   # chi.mecChi.chi.con.preDro.dp
  0       0                       0                       0                
  6  1280   # chi.mecChi.chi.con.preDro._m_flow_start
  0       0                       0                       0                
  6  1280   # chi.mecChi.chi.con.preDro._dp_start
  0       1                       0                       0                
  6   769   # chi.mecChi.chi.con.preDro.homotopyInitialization
  0       0                       0                       0                
  6  1281   # chi.mecChi.chi.con.preDro.from_dp
  0    1000                       0                       0                
  6  1280   # chi.mecChi.chi.con.preDro.dp_nominal
  0       0                       0                       0                
  6  1281   # chi.mecChi.chi.con.preDro.linearized
  0  1.3769614953517503E-01       0                 1.0000000000000000E+100
  6  1280   # chi.mecChi.chi.con.preDro.m_flow_turbulent
 -1  3.0000000000000000E+05       0                  1.0000000000000000E+08
  1  1304   # chi.mecChi.chi.con.preDro.sta_default.p
 -1  2.9314999999999998E+02       1                   10000                
  1  1304   # chi.mecChi.chi.con.preDro.sta_default.T
  0  1.0000000000000000E-03       0                 1.0000000000000000E+100
  6  1280   # chi.mecChi.chi.con.preDro.eta_default
  0  1.3769614953517504E+00       0                       0                
  6  1280   # chi.mecChi.chi.con.preDro.m_flow_nominal_pos
  0    1000                       0                       0                
  6  1280   # chi.mecChi.chi.con.preDro.dp_nominal_pos
  0  1.0000000000000001E-01  9.9999999999999995E-07 1.0000000000000000E+100
  6  1280   # chi.mecChi.chi.con.preDro.deltaM
  0  4.3543345756628861E-02       0                       0                
  6  1280   # chi.mecChi.chi.con.preDro.k
  0       1                       0                       0                
  6  1281   # chi.mecChi.chi.con.preDro.computeFlowResistance
  0       0                       0                       0                
  6  1280   # chi.mecChi.chi.con.preDro.coeff
 -1  3.0000000000000000E+05       0                  1.0000000000000000E+08
  1  1304   # chi.mecChi.chi.con.sta_default.p
 -1  2.9314999999999998E+02       1                   10000                
  1  1304   # chi.mecChi.chi.con.sta_default.T
  0  9.9558600000000001E+02       0                 1.0000000000000000E+100
  6  1280   # chi.mecChi.chi.con.rho_default
  0  3.0000000000000000E+05       0                  1.0000000000000000E+08
  6  1280   # chi.mecChi.chi.con.sta_start.p
  0  2.9314999999999998E+02       1                   10000                
  6  1280   # chi.mecChi.chi.con.sta_start.T
  0       0                       0                       0                
  6  1280   # chi.mecChi.chi.con.h_outflow_start
  0  5.7612068965517239E+04       0                       0                
  6  1280   # chi.mecChi.chi.con.Q_flow_nominal
  0       0                       0                       0                
  6  1280   # chi.mecChi.chi.con.u
 -1  2.9314999999999998E+02       0                 1.0000000000000000E+100
  1  1304   # chi.mecChi.chi.con.preHea.T_ref
  0       0                       0                       0                
  6  1280   # chi.mecChi.chi.con.preHea.alpha
  0  5.7612068965517239E+04       0                       0                
  6  1280   # chi.mecChi.chi.con.gai.k
  0       1                       0                       0                
  6  1281   # chi.mecChi.chi.eva.allowFlowReversal
  0  1.1379557592140830E+00       0                       0                
  6  1280   # chi.mecChi.chi.eva.m_flow_nominal
  0  1.1379557592140831E-04       0                 1.0000000000000000E+100
  6  1280   # chi.mecChi.chi.eva.m_flow_small
  0       0                       0                       0                
  6   769   # chi.mecChi.chi.eva.show_T
  0       0                       0                       0                
  6  1280   # chi.mecChi.chi.eva.dp
  0       0                       0                       0                
  6  1280   # chi.mecChi.chi.eva._m_flow_start
  0       0                       0                       0                
  6  1280   # chi.mecChi.chi.eva._dp_start
  0       1                       0                       0                
  6  1281   # chi.mecChi.chi.eva.computeFlowResistance
  0       0                       0                       0                
  6  1281   # chi.mecChi.chi.eva.from_dp
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # chi.mecChi.chi.eva.dp_nominal
  0       0                       0                       0                
  6  1281   # chi.mecChi.chi.eva.linearizeFlowResistance
  0  1.0000000000000001E-01       0                       0                
  6  1280   # chi.mecChi.chi.eva.deltaM
  0       1                       0                       0                
  6   769   # chi.mecChi.chi.eva.homotopyInitialization
  0       0                       0                       0                
  6  1280   # chi.mecChi.chi.eva.tau
  0       4                       1                       4                
  6  1282   # chi.mecChi.chi.eva.energyDynamics
 -1  3.0000000000000000E+05       0                  1.0000000000000000E+08
  1  1304   # chi.mecChi.chi.eva.p_start
  0  2.9314999999999998E+02       1                   10000                
  6  1280   # chi.mecChi.chi.eva.T_start
 -1       1                       0                       1                
  1  1304   # chi.mecChi.chi.eva.X_start[1]
  0       4                       1                       4                
  6  1282   # chi.mecChi.chi.eva.vol.energyDynamics
  0       4                       1                       4                
  6  1282   # chi.mecChi.chi.eva.vol.massDynamics
  0       4                       1                       4                
  6  1282   # chi.mecChi.chi.eva.vol.substanceDynamics
  0       4                       1                       4                
  6  1282   # chi.mecChi.chi.eva.vol.traceDynamics
  0  3.0000000000000000E+05       0                  1.0000000000000000E+08
  6  1280   # chi.mecChi.chi.eva.vol.p_start
  0  2.9314999999999998E+02       1                   10000                
  6  1280   # chi.mecChi.chi.eva.vol.T_start
  0       0                       0                       1                
  6  1280   # chi.mecChi.chi.eva.vol.X_start[1]
  0       1                       1                 1.0000000000000000E+100
  6  1280   # chi.mecChi.chi.eva.vol.mSenFac
  0       0                       0                       0                
  6  1281   # chi.mecChi.chi.eva.vol.wrongEnergyMassBalanceConfiguration
  0       0                       0                       0                
  6   769   # chi.mecChi.chi.eva.vol.initialize_p
  0       1                       0                       0                
  6  1281   # chi.mecChi.chi.eva.vol.prescribedHeatFlowRate
  0       1                       0                       0                
  6  1281   # chi.mecChi.chi.eva.vol.simplify_mWat_flow
  0  1.1379557592140830E+00       0                 1.0000000000000000E+100
  6  1280   # chi.mecChi.chi.eva.vol.m_flow_nominal
  0       2                       0                       0                
  6  1282   # chi.mecChi.chi.eva.vol.nPorts
  0  1.1379557592140831E-04       0                 1.0000000000000000E+100
  6  1280   # chi.mecChi.chi.eva.vol.m_flow_small
  0       1                       0                       0                
  6  1281   # chi.mecChi.chi.eva.vol.allowFlowReversal
  0       0                       0                       0                
  6  1280   # chi.mecChi.chi.eva.vol.V
  0     300                       1                   10000                
  6  1280   # chi.mecChi.chi.eva.vol.T
  0       0                       0                       0                
  6  1280   # chi.mecChi.chi.eva.vol.U
  0       0                       0                       0                
  6  1280   # chi.mecChi.chi.eva.vol.m
  0  9.9558600000000001E+02       0                 1.0000000000000000E+100
  6  1280   # chi.mecChi.chi.eva.vol.rho_start
  0  3.0000000000000000E+05       0                  1.0000000000000000E+08
  6  1280   # chi.mecChi.chi.eva.vol.state_default.p
  0  2.9314999999999998E+02       1                   10000                
  6  1280   # chi.mecChi.chi.eva.vol.state_default.T
  0  9.9558600000000001E+02       0                 1.0000000000000000E+100
  6  1280   # chi.mecChi.chi.eva.vol.rho_default
  0  3.0000000000000000E+05       0                  1.0000000000000000E+08
  6  1280   # chi.mecChi.chi.eva.vol.state_start.p
  0  2.9314999999999998E+02       1                   10000                
  6  1280   # chi.mecChi.chi.eva.vol.state_start.T
  0       1                       0                       0                
  6  1281   # chi.mecChi.chi.eva.vol.useSteadyStateTwoPort
  0       0                       0                       0                
  6  1280   # chi.mecChi.chi.eva.vol.hOut_internal
  0       0                       0                       0                
  6  1281   # chi.mecChi.chi.eva.vol.use_C_flow
  0       1                       0                       0                
  6  1281   # chi.mecChi.chi.eva.vol.steBal.allowFlowReversal
  0  1.1379557592140830E+00       0                       0                
  6  1280   # chi.mecChi.chi.eva.vol.steBal.m_flow_nominal
  0  1.1379557592140831E-04       0                 1.0000000000000000E+100
  6  1280   # chi.mecChi.chi.eva.vol.steBal.m_flow_small
  0       0                       0                       0                
  6   769   # chi.mecChi.chi.eva.vol.steBal.show_T
  0       0                       0                       0                
  6  1280   # chi.mecChi.chi.eva.vol.steBal.dp
  0       0                       0                       0                
  6  1280   # chi.mecChi.chi.eva.vol.steBal._m_flow_start
  0       0                       0                       0                
  6  1280   # chi.mecChi.chi.eva.vol.steBal._dp_start
  0       1                       0                       0                
  6  1281   # chi.mecChi.chi.eva.vol.steBal.simplify_mWat_flow
  0       1                       0                       0                
  6  1281   # chi.mecChi.chi.eva.vol.steBal.prescribedHeatFlowRate
  0       0                       0                       0                
  6  1281   # chi.mecChi.chi.eva.vol.steBal.use_mWat_flow
  0       0                       0                       0                
  6  1281   # chi.mecChi.chi.eva.vol.steBal.use_C_flow
  0       1                       0                       0                
  6  1281   # chi.mecChi.chi.eva.vol.steBal.use_m_flowInv
  0       0                       0                       0                
  6  1280   # chi.mecChi.chi.eva.vol.steBal.m_flowInv
  0  1.1379557592140831E-07       0                       0                
  6  1280   # chi.mecChi.chi.eva.vol.steBal.deltaReg
  0  8.7876878508057222E+06       0                       0                
  6  1280   # chi.mecChi.chi.eva.vol.steBal.deltaInvReg
  0 -1.3181531776208583E+08       0                       0                
  6  1280   # chi.mecChi.chi.eva.vol.steBal.aReg
  0  9.1895914738206220E+15       0                       0                
  6  1280   # chi.mecChi.chi.eva.vol.steBal.bReg
  0 -2.4498024661141544E+23       0                       0                
  6  1280   # chi.mecChi.chi.eva.vol.steBal.cReg
  0  3.1844889370350040E+30       0                       0                
  6  1280   # chi.mecChi.chi.eva.vol.steBal.dReg
  0 -1.9913917607383780E+37       0                       0                
  6  1280   # chi.mecChi.chi.eva.vol.steBal.eReg
  0  4.7893995656096490E+43       0                       0                
  6  1280   # chi.mecChi.chi.eva.vol.steBal.fReg
  0  3.0000000000000000E+05       0                  1.0000000000000000E+08
  6  1280   # chi.mecChi.chi.eva.vol.steBal.state_default.p
  0  2.9314999999999998E+02       1                   10000                
  6  1280   # chi.mecChi.chi.eva.vol.steBal.state_default.T
  0    4184                       0                       0                
  6  1280   # chi.mecChi.chi.eva.vol.steBal.cp_default
  0     200                       1                 1.0000000000000000E+100
  6  1280   # chi.mecChi.chi.eva.vol.steBal.dTMax
  0       0                       0                       0                
  6  1280   # chi.mecChi.chi.eva.vol.steBal.mWat_flow_internal
  0       1                       0                       0                
  6  1281   # chi.mecChi.chi.eva.preDro.allowFlowReversal
  0  1.1379557592140830E+00       0                       0                
  6  1280   # chi.mecChi.chi.eva.preDro.m_flow_nominal
  0  1.1379557592140831E-04       0                 1.0000000000000000E+100
  6  1280   # chi.mecChi.chi.eva.preDro.m_flow_small
  0       0                       0                       0                
  6   769   # chi.mecChi.chi.eva.preDro.show_T
  0       0                       0                       0                
  6  1280   # chi.mecChi.chi.eva.preDro.dp
  0       0                       0                       0                
  6  1280   # chi.mecChi.chi.eva.preDro._m_flow_start
  0       0                       0                       0                
  6  1280   # chi.mecChi.chi.eva.preDro._dp_start
  0       1                       0                       0                
  6   769   # chi.mecChi.chi.eva.preDro.homotopyInitialization
  0       0                       0                       0                
  6  1281   # chi.mecChi.chi.eva.preDro.from_dp
  0    1000                       0                       0                
  6  1280   # chi.mecChi.chi.eva.preDro.dp_nominal
  0       0                       0                       0                
  6  1281   # chi.mecChi.chi.eva.preDro.linearized
  0  1.1379557592140831E-01       0                 1.0000000000000000E+100
  6  1280   # chi.mecChi.chi.eva.preDro.m_flow_turbulent
 -1  3.0000000000000000E+05       0                  1.0000000000000000E+08
  1  1304   # chi.mecChi.chi.eva.preDro.sta_default.p
 -1  2.9314999999999998E+02       1                   10000                
  1  1304   # chi.mecChi.chi.eva.preDro.sta_default.T
  0  1.0000000000000000E-03       0                 1.0000000000000000E+100
  6  1280   # chi.mecChi.chi.eva.preDro.eta_default
  0  1.1379557592140830E+00       0                       0                
  6  1280   # chi.mecChi.chi.eva.preDro.m_flow_nominal_pos
  0    1000                       0                       0                
  6  1280   # chi.mecChi.chi.eva.preDro.dp_nominal_pos
  0  1.0000000000000001E-01  9.9999999999999995E-07 1.0000000000000000E+100
  6  1280   # chi.mecChi.chi.eva.preDro.deltaM
  0  3.5985320756226423E-02       0                       0                
  6  1280   # chi.mecChi.chi.eva.preDro.k
  0       1                       0                       0                
  6  1281   # chi.mecChi.chi.eva.preDro.computeFlowResistance
  0       0                       0                       0                
  6  1280   # chi.mecChi.chi.eva.preDro.coeff
 -1  3.0000000000000000E+05       0                  1.0000000000000000E+08
  1  1304   # chi.mecChi.chi.eva.sta_default.p
 -1  2.9314999999999998E+02       1                   10000                
  1  1304   # chi.mecChi.chi.eva.sta_default.T
  0  9.9558600000000001E+02       0                 1.0000000000000000E+100
  6  1280   # chi.mecChi.chi.eva.rho_default
  0  3.0000000000000000E+05       0                  1.0000000000000000E+08
  6  1280   # chi.mecChi.chi.eva.sta_start.p
  0  2.9314999999999998E+02       1                   10000                
  6  1280   # chi.mecChi.chi.eva.sta_start.T
  0       0                       0                       0                
  6  1280   # chi.mecChi.chi.eva.h_outflow_start
  0 -4.7612068965517239E+04       0                       0                
  6  1280   # chi.mecChi.chi.eva.Q_flow_nominal
  0       0                       0                       0                
  6  1280   # chi.mecChi.chi.eva.u
 -1  2.9314999999999998E+02       0                 1.0000000000000000E+100
  1  1304   # chi.mecChi.chi.eva.preHea.T_ref
  0       0                       0                       0                
  6  1280   # chi.mecChi.chi.eva.preHea.alpha
  0 -4.7612068965517239E+04       0                       0                
  6  1280   # chi.mecChi.chi.eva.gai.k
  0   10000                       0                 1.0000000000000000E+100
  6   256   # chi.mecChi.chi.P_nominal
  0       0                       0                       1                
  6   256   # chi.mecChi.chi.y
  0  5.7612068965517239E+04       0                       0                
  6  1280   # chi.mecChi.chi.QCon_flow_internal
  0 -4.7612068965517239E+04       0                       0                
  6  1312   # chi.mecChi.chi.QEva_flow_internal
  0   10000                       0                       0                
  6  1280   # chi.mecChi.chi.PEle.k
  0       0                       0                       0                
  6   388   # chi.mecChi.shaft.tau
  0       1                       0                 1.0000000000000000E+100
  6   256   # chi.mecChi.ine.J
  0       3                       1                       5                
  6   770   # chi.mecChi.ine.stateSelect
  0       0                       0                       0                
  6   256   # chi.mecChi.ine.phi
 -1       0                       0                       0                
  2   272   # chi.mecChi.ine.w
  0       0                       0                       0                
  3   256   # chi.mecChi.ine.der(w)
  0       0                       0                       0                
  6   769   # chi.mecChi.tor.useSupport
  0       0                       0                       0                
  6  1280   # chi.mecChi.tor.phi_support
  0       0                       0                       0                
  6   388   # chi.mecChi.spe.flange.tau
  0       0                       0                       0                
  6   256   # chi.mecChi.to_rpm.y
 -1       3                       1                 1.0000000000000000E+100
  1   282   # chi.mecChi.multiProduct.significantDigits
  0       3                       0                 1.0000000000000000E+100
  6   770   # chi.mecChi.multiProduct.nu
  0       0                       0                       0                
  6   256   # chi.mecChi.multiProduct.u[1]
  0       1                       0                       0                
  6   256   # chi.mecChi.gaiSpe.k
  0       0                       0                       0                
  6   256   # chi.mecChi.QCon_flow
  0       0                       0                       0                
  6   256   # chi.mecChi.P
  0       0                       0                       0                
  6   256   # chi.mecChi.QEva_flow
  0       1                       0                       0                
  6  1281   # chi.mecChi.COP_is_for_cooling
  0  2.7614999999999998E+02       0                 1.0000000000000000E+100
  6  1280   # chi.mecChi.TUseAct_nominal
  0    4184                       0                       0                
  6  1280   # chi.mecChi.cp1_default
  0    4184                       0                       0                
  6  1280   # chi.mecChi.cp2_default
 -1       4                       0                       0                
  1   282   # chi.simMot.per.P
 -1  1.7000000000000001E-01       0                       0                
  1   280   # chi.simMot.per.J
 -1  1.4580000000000001E-01       0                       0                
  1   280   # chi.simMot.per.Lr
 -1  1.4570000000000000E-01       0                       0                
  1   280   # chi.simMot.per.Ls
 -1  1.4060000000000000E-01       0                       0                
  1   280   # chi.simMot.per.Lm
 -1       1                       0                       0                
  1   280   # chi.simMot.per.Rs
 -1  1.1450000000000000E+00       0                       0                
  1   280   # chi.simMot.per.Rr
 -1      50                       0                       0                
  1   280   # chi.simMot.per.Freq
 -1     400                       0                       0                
  1   280   # chi.simMot.per.Voltage
  0       0                       0                       0                
  6   258   # chi.simMot.P
  0       0                       0                       0                
  6   256   # chi.simMot.J
  0       0                       0                       0                
  6   256   # chi.simMot.Lr
  0       0                       0                       0                
  6   256   # chi.simMot.Ls
  0       0                       0                       0                
  6   256   # chi.simMot.Lm
  0       0                       0                       0                
  6   256   # chi.simMot.Rr
  0       0                       0                       0                
  6   256   # chi.simMot.Rs
 -1       1                       0                       0                
  1   281   # chi.simMot.have_controller
 -1       0                       0                       0                
  1   281   # chi.simMot.reverseActing
  0       1                       1                       4                
  6   258   # chi.simMot.controllerType
  0       0                       0                 1.0000000000000000E+100
  6   256   # chi.simMot.k
  0  9.9999999999999997E-61  9.9999999999999997E-61 1.0000000000000000E+100
  6   256   # chi.simMot.Ti
  0       0                       0                 1.0000000000000000E+100
  6   256   # chi.simMot.Td
  0       1                       0                       0                
  6   256   # chi.simMot.yMax
  0       0                       0                       0                
  6   256   # chi.simMot.yMin
  0       0                       0                       0                
  6   256   # chi.simMot.v_rms
  0       0                       0                       0                
  6   256   # chi.simMot.i_rms
  0       0                       0                       0                
  6   256   # chi.simMot.pow_gap
  0       0                       0                       0                
  6   256   # chi.simMot.theta_s
  0       0                       0                       0                
  6   256   # chi.simMot.der(theta_s)
  0       0                       0                       0                
  6   256   # chi.simMot.fre.y
  0       0                       0                       0                
  6   256   # chi.simMot.VFDfre.u1
  0       0                       0                       0                
  6   256   # chi.simMot.current_Block.I_a
  0       0                       0                       0                
  6   256   # chi.simMot.current_Block.I_b
  0       0                       0                       0                
  6   256   # chi.simMot.current_Block.I_c
  0       0                       0                       0                
  6   256   # chi.simMot.speBlo.tau_e
  0       0                       0                       0                
  6   256   # chi.simMot.speBlo.omega
  0       0                       0                       0                
  6   256   # chi.simMot.speBlo.omega_r
  0       0                       0                       0                
  6   256   # chi.simMot.speBlo.N
  0  1.3100000000000001E-02       0                       0                
  6   256   # chi.simMot.speBlo.J
  0       4                       0                       0                
  6   258   # chi.simMot.speBlo.P
  0       0                       0                       0                
  6   256   # chi.simMot.speBlo.feedback.y
  0       1                       0                       0                
  6   256   # chi.simMot.speBlo.gain.k
  0       0                       0                       0                
  6   256   # chi.simMot.speBlo.gain.y
 -1       1                       0                       0                
  1   280   # chi.simMot.speBlo.integrator.k
  0       0                       0                       0                
  6   769   # chi.simMot.speBlo.integrator.use_reset
  0       0                       0                       0                
  6   769   # chi.simMot.speBlo.integrator.use_set
  0       3                       1                       4                
  6   258   # chi.simMot.speBlo.integrator.initType
  0       0                       0                       0                
  6   256   # chi.simMot.speBlo.integrator.y_start
  0       0                       0                       0                
  6   769   # chi.simMot.speBlo.integrator.local_reset
  0       0                       0                       0                
  6   768   # chi.simMot.speBlo.integrator.local_set
  0       1                       0                       0                
  6   256   # chi.simMot.speBlo.gain1.k
 -1       1                       0                       0                
  1   280   # chi.simMot.integrator.k
  0       0                       0                       0                
  6   769   # chi.simMot.integrator.use_reset
  0       0                       0                       0                
  6   769   # chi.simMot.integrator.use_set
  0       3                       1                       4                
  6   258   # chi.simMot.integrator.initType
 -1       0                       0                       0                
  1   280   # chi.simMot.integrator.y_start
  0       0                       0                       0                
  6   256   # chi.simMot.integrator.u
 -1       0                       0                       0                
  2   272   # chi.simMot.integrator.y
  0       0                       0                       0                
  3   256   # chi.simMot.integrator.der(y)
  0       0                       0                       0                
  6   769   # chi.simMot.integrator.local_reset
  0       0                       0                       0                
  6   768   # chi.simMot.integrator.local_set
  0       0                       0                       0                
  6   258   # chi.simMot.torSpe.P
  0       0                       0                       0                
  6   256   # chi.simMot.torSpe.J
  0       0                       0                       0                
  6   256   # chi.simMot.torSpe.Lr
  0       0                       0                       0                
  6   256   # chi.simMot.torSpe.Ls
  0       0                       0                       0                
  6   256   # chi.simMot.torSpe.Rr
  0       0                       0                       0                
  6   256   # chi.simMot.torSpe.Lm
  0       0                       0                       0                
  6   256   # chi.simMot.torSpe.Rs
  0       0                       0                       0                
  6   256   # chi.simMot.torSpe.motMod.Lr
  0       0                       0                       0                
  6   256   # chi.simMot.torSpe.motMod.Ls
  0       0                       0                       0                
  6   256   # chi.simMot.torSpe.motMod.Rr
  0       0                       0                       0                
  6   256   # chi.simMot.torSpe.motMod.Lm
  0       0                       0                       0                
  6   256   # chi.simMot.torSpe.motMod.Rs
  0       0                       0                       0                
  6   256   # chi.simMot.torSpe.motMod.i_qr_block.Lr
  0       0                       0                       0                
  6   256   # chi.simMot.torSpe.motMod.i_qr_block.Rr
  0       0                       0                       0                
  6   256   # chi.simMot.torSpe.motMod.i_qr_block.Lm
  0       0                       0                       0                
  6   256   # chi.simMot.torSpe.motMod.i_qr_block.der_i_qs
  0       0                       0                       0                
  6   256   # chi.simMot.torSpe.motMod.i_qr_block.der_i_qr
 -1       1                       0                       0                
  1   280   # chi.simMot.torSpe.motMod.int_qr.k
  0       0                       0                       0                
  6   769   # chi.simMot.torSpe.motMod.int_qr.use_reset
  0       0                       0                       0                
  6   769   # chi.simMot.torSpe.motMod.int_qr.use_set
  0       3                       1                       4                
  6   258   # chi.simMot.torSpe.motMod.int_qr.initType
 -1       0                       0                       0                
  1   280   # chi.simMot.torSpe.motMod.int_qr.y_start
 -1       0                       0                       0                
  2   272   # chi.simMot.torSpe.motMod.int_qr.y
  0       0                       0                       0                
  3   256   # chi.simMot.torSpe.motMod.int_qr.der(y)
  0       0                       0                       0                
  6   769   # chi.simMot.torSpe.motMod.int_qr.local_reset
  0       0                       0                       0                
  6   768   # chi.simMot.torSpe.motMod.int_qr.local_set
  0       0                       0                       0                
  6   256   # chi.simMot.torSpe.motMod.i_dr_block.Lr
  0       0                       0                       0                
  6   256   # chi.simMot.torSpe.motMod.i_dr_block.Rr
  0       0                       0                       0                
  6   256   # chi.simMot.torSpe.motMod.i_dr_block.Lm
  0       0                       0                       0                
  6   256   # chi.simMot.torSpe.motMod.i_dr_block.der_i_ds
  0       0                       0                       0                
  6   256   # chi.simMot.torSpe.motMod.i_dr_block.der_i_dr
 -1       1                       0                       0                
  1   280   # chi.simMot.torSpe.motMod.int_dr.k
  0       0                       0                       0                
  6   769   # chi.simMot.torSpe.motMod.int_dr.use_reset
  0       0                       0                       0                
  6   769   # chi.simMot.torSpe.motMod.int_dr.use_set
  0       3                       1                       4                
  6   258   # chi.simMot.torSpe.motMod.int_dr.initType
 -1       0                       0                       0                
  1   280   # chi.simMot.torSpe.motMod.int_dr.y_start
 -1       0                       0                       0                
  2   272   # chi.simMot.torSpe.motMod.int_dr.y
  0       0                       0                       0                
  3   256   # chi.simMot.torSpe.motMod.int_dr.der(y)
  0       0                       0                       0                
  6   769   # chi.simMot.torSpe.motMod.int_dr.local_reset
  0       0                       0                       0                
  6   768   # chi.simMot.torSpe.motMod.int_dr.local_set
 -1       0                       0                       0                
  1   280   # chi.simMot.torSpe.motMod.v_dr.k
  0       0                       0                       0                
  6   256   # chi.simMot.torSpe.motMod.i_qs_block.Lr
  0       0                       0                       0                
  6   256   # chi.simMot.torSpe.motMod.i_qs_block.Rr
  0       0                       0                       0                
  6   256   # chi.simMot.torSpe.motMod.i_qs_block.Lm
  0       0                       0                       0                
  6   256   # chi.simMot.torSpe.motMod.i_qs_block.Rs
  0       0                       0                       0                
  6   256   # chi.simMot.torSpe.motMod.i_qs_block.Ls
 -1       1                       0                       0                
  1   280   # chi.simMot.torSpe.motMod.int_qs.k
  0       0                       0                       0                
  6   769   # chi.simMot.torSpe.motMod.int_qs.use_reset
  0       0                       0                       0                
  6   769   # chi.simMot.torSpe.motMod.int_qs.use_set
  0       3                       1                       4                
  6   258   # chi.simMot.torSpe.motMod.int_qs.initType
 -1       0                       0                       0                
  1   280   # chi.simMot.torSpe.motMod.int_qs.y_start
 -1       0                       0                       0                
  2   272   # chi.simMot.torSpe.motMod.int_qs.y
  0       0                       0                       0                
  3   256   # chi.simMot.torSpe.motMod.int_qs.der(y)
  0       0                       0                       0                
  6   769   # chi.simMot.torSpe.motMod.int_qs.local_reset
  0       0                       0                       0                
  6   768   # chi.simMot.torSpe.motMod.int_qs.local_set
  0       0                       0                       0                
  6   256   # chi.simMot.torSpe.motMod.i_ds_block.Lr
  0       0                       0                       0                
  6   256   # chi.simMot.torSpe.motMod.i_ds_block.Rr
  0       0                       0                       0                
  6   256   # chi.simMot.torSpe.motMod.i_ds_block.Lm
  0       0                       0                       0                
  6   256   # chi.simMot.torSpe.motMod.i_ds_block.Rs
  0       0                       0                       0                
  6   256   # chi.simMot.torSpe.motMod.i_ds_block.Ls
 -1       1                       0                       0                
  1   280   # chi.simMot.torSpe.motMod.int_ds.k
  0       0                       0                       0                
  6   769   # chi.simMot.torSpe.motMod.int_ds.use_reset
  0       0                       0                       0                
  6   769   # chi.simMot.torSpe.motMod.int_ds.use_set
  0       3                       1                       4                
  6   258   # chi.simMot.torSpe.motMod.int_ds.initType
 -1       0                       0                       0                
  1   280   # chi.simMot.torSpe.motMod.int_ds.y_start
 -1       0                       0                       0                
  2   272   # chi.simMot.torSpe.motMod.int_ds.y
  0       0                       0                       0                
  3   256   # chi.simMot.torSpe.motMod.int_ds.der(y)
  0       0                       0                       0                
  6   769   # chi.simMot.torSpe.motMod.int_ds.local_reset
  0       0                       0                       0                
  6   768   # chi.simMot.torSpe.motMod.int_ds.local_set
 -1       0                       0                       0                
  1   280   # chi.simMot.torSpe.motMod.v_qr.k
  0       0                       0                       0                
  6   258   # chi.simMot.torSpe.torBlo.P
  0  5.0000000000000000E-01       0                       0                
  6   256   # chi.simMot.torSpe.torBlo.Lm
  0  1.3100000000000001E-02       0                       0                
  6   256   # chi.simMot.torSpe.torBlo.J
  0       0                       0                       0                
  6   256   # chi.simMot.torSpe.volCon.V_rms
  0       0                       0                       0                
  6   256   # chi.simMot.torSpe.volCon.v_qs
  0       0                       0                       0                
  6   256   # chi.simMot.torSpe.volCon.v_ds
  0       0                       0                       0                
  6   256   # chi.simMot.torSpe.frequencyConversion.f
  0       0                       0                       0                
  6   256   # chi.simMot.torSpe.frequencyConversion.omega
  0       0                       0                       0                
  6   769   # chi.simMot.speed.useSupport
  0       0                       0                       0                
  6  1280   # chi.simMot.speed.phi_support
  0       1                       0                       0                
  6   257   # chi.simMot.speed.exact
 -1      50                       0                       0                
  1   280   # chi.simMot.speed.f_crit
 -1       0                       0                       0                
  2   272   # chi.simMot.speed.phi
  0       0                       0                       0                
  3   256   # chi.simMot.speed.der(phi)
  0       0                       0                       0                
  6   256   # chi.simMot.speed.a
  0       0                       0                       0                
  6  1280   # chi.simMot.speed.w_crit
  0       1                       0                       0                
  6   256   # chi.simMot.VFD_Equivalent_Freq.k
  0       0                       0                       0                
  6   320   # chi.simMot.VFD_Equivalent_Freq.y
  0       0                       0                       0                
  6   256   # chi.simMot.VFD.y
  0       0                       0                       0                
  6   256   # chi.simMot.VFD.controlError
  0       2                       1                       4                
  6   258   # chi.simMot.VFD.controllerType
  0       0                       0                 1.0000000000000000E+100
  6   256   # chi.simMot.VFD.k
  0  9.9999999999999997E-61  9.9999999999999997E-61 1.0000000000000000E+100
  6   256   # chi.simMot.VFD.Ti
  0       0                       0                 1.0000000000000000E+100
  6   256   # chi.simMot.VFD.Td
  0       1                       0                       0                
  6   256   # chi.simMot.VFD.yMax
  0       0                       0                       0                
  6   256   # chi.simMot.VFD.yMin
 -1       1                       0                 1.0000000000000000E+100
  1   280   # chi.simMot.VFD.wp
 -1       0                       0                 1.0000000000000000E+100
  1   280   # chi.simMot.VFD.wd
 -1  9.0000000000000002E-01  1.0000000000000000E-13 1.0000000000000000E+100
  1   280   # chi.simMot.VFD.Ni
 -1      10                  1.0000000000000000E-13 1.0000000000000000E+100
  1   280   # chi.simMot.VFD.Nd
  0       2                       1                       4                
  6   258   # chi.simMot.VFD.initType
  0       0                       0                       0                
  6   256   # chi.simMot.VFD.xi_start
 -1       0                       0                       0                
  1   280   # chi.simMot.VFD.xd_start
 -1       0                       0                       0                
  1   280   # chi.simMot.VFD.y_start
  0       1                       0                       0                
  6   257   # chi.simMot.VFD.strict
  0       0                       0                       0                
  6   257   # chi.simMot.VFD.reverseActing
  0       1                       1                       3                
  6   258   # chi.simMot.VFD.reset
  0       0                       0                       0                
  6   256   # chi.simMot.VFD.y_reset
  0       0                       0                       0                
  6   256   # chi.simMot.VFD.addP.y
  0       0                       0                       0                
  6   256   # chi.simMot.VFD.addP.k1
  0       0                       0                       0                
  6   256   # chi.simMot.VFD.addP.k2
 -1       1                       0                       0                
  1   280   # chi.simMot.VFD.P.k
  0       0                       0                       0                
  6   256   # chi.simMot.VFD.P.y
  0       1                       0                       0                
  6   256   # chi.simMot.VFD.addPID.k1
  0       1                       0                       0                
  6   256   # chi.simMot.VFD.addPID.k2
  0       1                       0                       0                
  6   256   # chi.simMot.VFD.addPID.k3
  0       0                       0                       0                
  6   256   # chi.simMot.VFD.addPID.u2
  0       0                       0                       0                
  6   256   # chi.simMot.VFD.addPID.y
  0       1                       0                       0                
  6   768   # chi.simMot.VFD.unitTime
  0       0                       0                       0                
  6  1280   # chi.simMot.VFD.revAct
  0       1                       0                       0                
  6   769   # chi.simMot.VFD.with_I
  0       0                       0                       0                
  6   769   # chi.simMot.VFD.with_D
  0       0                       0                       0                
  6   768   # chi.simMot.VFD.Dzero.k
  0       0                       0                       0                
  6   768   # chi.simMot.VFD.Dzero.y
  0       0                       0                       0                
  6  1280   # chi.simMot.VFD.y_reset_internal
  0       0                       0                       0                
  6  1280   # chi.simMot.VFD.addI.k1
  0       0                       0                       0                
  6  1280   # chi.simMot.VFD.addI.k2
 -1       1                       0                       0                
  1  1304   # chi.simMot.VFD.addI.k3
  0       0                       0                       0                
  6  1280   # chi.simMot.VFD.addI.u3
  0       0                       0                       0                
  6  1280   # chi.simMot.VFD.addI.y
  0       0                       0                       0                
  6  1280   # chi.simMot.VFD.addSat.y
  0       1                       0                       0                
  6  1280   # chi.simMot.VFD.addSat.k1
  0      -1                       0                       0                
  6  1280   # chi.simMot.VFD.addSat.k2
  0       1                       0                       0                
  6  1280   # chi.simMot.VFD.gainPID.k
  0       0                       0                       0                
  6  1312   # chi.simMot.VFD.gainPID.y
  0       1                       0                       0                
  6  1280   # chi.simMot.VFD.gainTrack.k
  0       1                       0                       0                
  6  1280   # chi.simMot.VFD.limiter.uMax
  0       0                       0                       0                
  6  1280   # chi.simMot.VFD.limiter.uMin
  0       1                       0                       0                
  6  1281   # chi.simMot.VFD.limiter.strict
  0       1                       0                       0                
  6  1281   # chi.simMot.VFD.limiter.limitsAtInit
 -1       0                       0                       0                
  2   272   # chi.simMot.VFD.I.y
  0       0                       0                       0                
  3   256   # chi.simMot.VFD.I.der(y)
  0       0                       0                       0                
  6   256   # chi.simMot.VFD.I.k
  0       2                       1                       4                
  6   258   # chi.simMot.VFD.I.initType
  0       0                       0                       0                
  6   256   # chi.simMot.VFD.I.y_start
  0       1                       1                       3                
  6   258   # chi.simMot.VFD.I.reset
  0       0                       0                       0                
  6   256   # chi.simMot.VFD.I.y_reset
  0       0                       0                       0                
  6  1280   # chi.simMot.VFD.I.y_reset_internal
  0       0                       0                       0                
  6  1281   # chi.simMot.VFD.I.trigger_internal
  0       0                       0                       0                
  6   320   # chi.simMot.switch1.u3
  0       1                       0                       0                
  6  1281   # chi.COP_is_for_cooling
  0  2.7614999999999998E+02       0                 1.0000000000000000E+100
  6  1280   # chi.TUseAct_nominal
  0    4184                       0                       0                
  6  1280   # chi.cp1_default
  0    4184                       0                       0                
  6  1280   # chi.cp2_default
 -1       0                       0                       0                
  1   280   # TEva_in.height
 -1     600                       0                 1.0000000000000000E+100
  1   280   # TEva_in.duration
 -1  2.9014999999999998E+02       0                       0                
  1   280   # TEva_in.offset
 -1       0                       0                       0                
  1   280   # TEva_in.startTime
  0       0                       0                       0                
  4   256   # CPUtime
  0       0                       0                       0                
  4   256   # EventCounter
  0       0                       0                       0                
  6   256   # NonlinearSystems.initialization[1].Calls
  0       0                       0                       0                
  6   256   # NonlinearSystems.initialization[1].Residues
  0       0                       0                       0                
  6   256   # NonlinearSystems.initialization[1].Iterations
  0       0                       0                       0                
  6   256   # NonlinearSystems.initialization[1].Jacobians
  0       0                       0                       0                
  6   256   # NonlinearSystems.simulation[1].Calls
  0       0                       0                       0                
  6   256   # NonlinearSystems.simulation[1].Residues
  0       0                       0                       0                
  6   256   # NonlinearSystems.simulation[1].Iterations
  0       0                       0                       0                
  6   256   # NonlinearSystems.simulation[1].Jacobians


# Matrix with 6 columns defining the initial value calculation
# (columns 5 and 6 are not utilized for the calculation but are
#  reported by dymosim via dymosim -i for user convenience):
#
# column 1: Type of initial value
#           = -2: special case: for continuing simulation (column 2 = value)
#           = -1: fixed value (column 2 = fixed value)
#           =  0: free value, i.e., no restriction (column 2 = initial value)
#           >  0: desired value (column 1 = weight for optimization
#                                column 2 = desired value)
#                 use weight=1, since automatic scaling usually
#                 leads to equally weighted terms
# column 2: fixed, free or desired value according to column 1.
# column 3: Minimum value (ignored, if Minimum >= Maximum).
# column 4: Maximum value (ignored, if Minimum >= Maximum).
#           Minimum and maximum restrict the search range in initial
#           value calculation. They might also be used for scaling.
# column 5: Category of variable.
#           = 1: parameter.
#           = 2: state.
#           = 3: state derivative.
#           = 4: output.
#           = 5: input.
#           = 6: auxiliary variable.
# column 6: Data type of variable and flags according to dsBaseType
#  <value>&3= 0: real.
#  <value>&3= 1: boolean.
#  <value>&3= 2: integer.
#
# Initial values are calculated according to the following procedure:
#
# Initial values are calculated according to the following procedure:
#
# - If parameters, states and inputs are FIXED, and other variables
#   are FREE, the initialization is performed in the normal way.
#
# - If parameters and inputs are FIXED, and all other variables
#   have special case for continue (-2 in 1st column), or FREE
#   the initialization is ignored and variables are set to these values.
#   This is intended to continue the simulation.
#
#   Which variables will be important for initialization and continue
#   is indicated by value in column 6 & dsStartMasks.
#
char initialDescription(719,184)
Nominal compressor power (at y=1) [W]
Temperature difference evaporator outlet-inlet [K,]
Temperature difference condenser outlet-inlet [K,]
Chiller COP
Nominal mass flow rate at chilled water side [kg/s]
Nominal mass flow rate at condenser water wide [kg/s]
Number of ports [:#(type=Integer)]
Set to true to stop the simulation with an error if the medium temperature is outside its allowable range [:#(type=Boolean)]
Thermodynamic pressure in the connection point [Pa|bar]
Specific thermodynamic enthalpy close to the connection point if m_flow < 0 [J/kg]
Allowed flow direction [:#(type=Modelica.Fluid.Types.PortFlowDirection)]
Needed to connect to conditional connector [kg/kg]
Get the composition (all fractions) from the input connector [:#(type=Boolean)]
Get the composition (independent fractions) from the input connector [:#(type=Boolean)]
Get the trace substances from the input connector [:#(type=Boolean)]
Fixed value of composition [kg/kg]
Get the mass flow rate from the input connector [:#(type=Boolean)]
Fixed mass flow rate going out of the fluid port [kg/s]
Get the temperature from the input connector [:#(type=Boolean)]
Fixed value of temperature [K|degC]
Needed to connect to conditional connector [K|degC]
Height of ramps
Duration of ramp (= 0.0 gives a Step) [s]
Offset of output signal y
Output y = offset for time < startTime [s]
Number of ports [:#(type=Integer)]
Set to true to stop the simulation with an error if the medium temperature is outside its allowable range [:#(type=Boolean)]
Thermodynamic pressure in the connection point [Pa|bar]
Specific thermodynamic enthalpy close to the connection point if m_flow < 0 [J/kg]
Allowed flow direction [:#(type=Modelica.Fluid.Types.PortFlowDirection)]
Needed to connect to conditional connector [kg/kg]
Get the composition (all fractions) from the input connector [:#(type=Boolean)]
Get the composition (independent fractions) from the input connector [:#(type=Boolean)]
Get the trace substances from the input connector [:#(type=Boolean)]
Fixed value of composition [kg/kg]
Get the mass flow rate from the input connector [:#(type=Boolean)]
Fixed mass flow rate going out of the fluid port [kg/s]
Get the temperature from the input connector [:#(type=Boolean)]
Fixed value of temperature [K|degC]
Needed to connect to conditional connector [K|degC]
Voltage vector [V]
Voltage vector [V]
Current vector [A]
Current vector [A]
Frequency of the source [Hz]
RMS voltage of the source [V]
Phase shift angle of the source [rad|deg]
Real power [W]
Apparent power [var]
Phase shift [rad|deg]
Power factor
Serve as potential root for the reference angle theta [:#(type=Boolean)]
Serve as definite root for the reference angle theta [:#(type=Boolean)]
Complex power S[1] = P, S[2]= Q [W]
Frequency of the source [Hz]
RMS voltage of the source [V]
Phase shift of the source [rad|deg]
Absolute angle of rotating system as offset to thetaRef [rad|deg]
= false to simplify equations, assuming, but not enforcing, no flow reversal [:#(type=Boolean)]
Specific thermodynamic enthalpy close to the connection point if m_flow < 0 [J/kg]
Specific thermodynamic enthalpy close to the connection point if m_flow < 0 [J/kg]
Nominal mass flow rate, used for regularization near zero flow [kg/s]
For bi-directional flow, temperature is regularized in the region |m_flow| < m_flow_small (m_flow_small > 0 required) [kg/s]
Time constant at nominal flow rate (use tau=0 for steady-state sensor, but see user guide for potential problems) [s]
Type of initialization (InitialState and InitialOutput are identical) [:#(type=Modelica.Blocks.Types.Init)]
Gain to take flow rate into account for sensor time constant
Flag, true if the sensor is a dynamic sensor [:#(type=Boolean)]
Normalized mass flow rate
Inverse of tau [s-1]
Temperature of the passing fluid [K|degC]
der(Temperature of the passing fluid) [K/s]
Initial or guess value of output (= state) [K|degC]
if true, temperature T converges towards TAmb when no flow [:#(type=Boolean)]
Fixed ambient temperature for heat transfer [K|degC]
Time constant for heat transfer, default 20 minutes [s]
Dummy parameter to avoid division by tauHeaTra [1/s]
Ratio of tau
Medium temperature to which the sensor is exposed [K|degC]
Temperature of inflowing fluid at port_a [K|degC]
Temperature of inflowing fluid at port_b, or T_a_inflow if uni-directional flow [K|degC]
Height of step
Connector of Real output signal
Offset of output signal y
Output y = offset for time < startTime [s]
Number of ports [:#(type=Integer)]
Set to true to stop the simulation with an error if the medium temperature is outside its allowable range [:#(type=Boolean)]
Allowed flow direction [:#(type=Modelica.Fluid.Types.PortFlowDirection)]
Needed to connect to conditional connector [kg/kg]
Get the composition (all fractions) from the input connector [:#(type=Boolean)]
Get the composition (independent fractions) from the input connector [:#(type=Boolean)]
Get the trace substances from the input connector [:#(type=Boolean)]
Fixed value of composition [kg/kg]
Get the pressure from the input connector [:#(type=Boolean)]
Fixed value of pressure [Pa|bar]
Get the temperature from the input connector [:#(type=Boolean)]
Fixed value of temperature [K|degC]
Evaluates to true if the pressure should be checked [:#(type=Boolean)]
Evaluates to true if the pressure should be checked [:#(type=Boolean)]
Number of ports [:#(type=Integer)]
Set to true to stop the simulation with an error if the medium temperature is outside its allowable range [:#(type=Boolean)]
Specific thermodynamic enthalpy close to the connection point if m_flow < 0 [J/kg]
Allowed flow direction [:#(type=Modelica.Fluid.Types.PortFlowDirection)]
Needed to connect to conditional connector [kg/kg]
Get the composition (all fractions) from the input connector [:#(type=Boolean)]
Get the composition (independent fractions) from the input connector [:#(type=Boolean)]
Get the trace substances from the input connector [:#(type=Boolean)]
Fixed value of composition [kg/kg]
Get the pressure from the input connector [:#(type=Boolean)]
Fixed value of pressure [Pa|bar]
Get the temperature from the input connector [:#(type=Boolean)]
Fixed value of temperature [K|degC]
Evaluates to true if the pressure should be checked [:#(type=Boolean)]
Evaluates to true if the pressure should be checked [:#(type=Boolean)]
= false to simplify equations, assuming, but not enforcing, no flow reversal for medium 1 [:#(type=Boolean)]
= false to simplify equations, assuming, but not enforcing, no flow reversal for medium 2 [:#(type=Boolean)]
Specific thermodynamic enthalpy close to the connection point if m_flow < 0 [J/kg]
Specific thermodynamic enthalpy close to the connection point if m_flow < 0 [J/kg]
Specific thermodynamic enthalpy close to the connection point if m_flow < 0 [J/kg]
Nominal mass flow rate [kg/s]
Nominal mass flow rate [kg/s]
Small mass flow rate for regularization of zero flow [kg/s]
Small mass flow rate for regularization of zero flow [kg/s]
= true, if actual temperature at port is computed [:#(type=Boolean)]
Pressure difference between port_a1 and port_b1 [Pa|Pa]
Pressure difference between port_a2 and port_b2 [Pa|Pa]
Temperature of medium [K|degC]
Temperature of medium [K|degC]
Temperature of medium [K|degC]
Temperature of medium [K|degC]
Nominal cooling heat flow rate (Negative) [W]
Nominal heating flow rate (Positive) [W]
Temperature difference evaporator outlet-inlet [K,]
Temperature difference condenser outlet-inlet [K,]
Nominal compressor power (at y=1) [W]
Nominal rotational speed of compressor [rev/min]
Pressure difference over condenser [Pa|Pa]
Pressure difference over evaporator [Pa|Pa]
Set to true to use Carnot effectiveness etaCarnot_nominal rather than COP_nominal [:#(type=Boolean)]
Carnot effectiveness (=COP/COP_Carnot) used if use_eta_Carnot_nominal = true [1]
Coefficient of performance at TEva_nominal and TCon_nominal, used if use_eta_Carnot_nominal = false [1]
Condenser temperature used to compute COP_nominal if use_eta_Carnot_nominal=false [K|degC]
Evaporator temperature used to compute COP_nominal if use_eta_Carnot_nominal=false [K|degC]
Coefficients for efficiency curve (need p(a=a, yPL=1)=1)
Temperature difference between refrigerant and working fluid outlet in condenser [K,]
Temperature difference between refrigerant and working fluid outlet in evaporator [K,]
Number of Poles [:#(type=Integer)]
Moment of Inertia [kg/m²] []
Rotor Inductance [H] []
Stator Inductance [H] []
Mutual Inductance [H] []
Stator Resistance [ohm] []
Rotor Resistance [ohm] []
Standard Frequency [Hz] []
Standard Voltage [V] []
Number of poles [:#(type=Integer)]
Moment of inertia
Rotor inductance [H] []
Stator inductance [H] []
Mutual inductance [H] []
Rotor resistance [ohm] []
Stator resistance [ohm] []
Set to true for enableing PID control [:#(type=Boolean)]
Type of controller [:#(type=Modelica.Blocks.Types.SimpleController)]
Gain of controller
Time constant of Integrator block [s]
Time constant of Derivative block [s]
Upper limit of output
Lower limit of output
= false to simplify equations, assuming, but not enforcing, no flow reversal for medium 1 [:#(type=Boolean)]
= false to simplify equations, assuming, but not enforcing, no flow reversal for medium 2 [:#(type=Boolean)]
Nominal mass flow rate [kg/s]
Nominal mass flow rate [kg/s]
Small mass flow rate for regularization of zero flow [kg/s]
Small mass flow rate for regularization of zero flow [kg/s]
= true, if actual temperature at port is computed [:#(type=Boolean)]
Pressure difference between port_a1 and port_b1 [Pa|Pa]
Pressure difference between port_a2 and port_b2 [Pa|Pa]
Temperature of medium [K|degC]
Temperature of medium [K|degC]
Temperature of medium [K|degC]
Temperature of medium [K|degC]
Nominal cooling heat flow rate (Negative) [W]
Nominal heating flow rate (Positive) [W]
Temperature difference evaporator outlet-inlet [K,]
Temperature difference condenser outlet-inlet [K,]
Nominal compressor power (at y=1) [W]
Pressure difference over condenser [Pa|Pa]
Pressure difference over evaporator [Pa|Pa]
Nominal rotational speed of compressor [rev/min]
Chiller inertia [kg.m2]
Set to true to use Carnot effectiveness etaCarnot_nominal rather than COP_nominal [:#(type=Boolean)]
Carnot effectiveness (=COP/COP_Carnot) used if use_eta_Carnot_nominal = true [1]
Coefficient of performance at TEva_nominal and TCon_nominal, used if use_eta_Carnot_nominal = false [1]
Condenser temperature used to compute COP_nominal if use_eta_Carnot_nominal=false [K|degC]
Evaporator temperature used to compute COP_nominal if use_eta_Carnot_nominal=false [K|degC]
Coefficients for efficiency curve (need p(a=a, yPL=1)=1)
Temperature difference between refrigerant and working fluid outlet in condenser [K,]
Temperature difference between refrigerant and working fluid outlet in evaporator [K,]
Chiller torque [N.m]
= false to simplify equations, assuming, but not enforcing, no flow reversal for medium 1 [:#(type=Boolean)]
= false to simplify equations, assuming, but not enforcing, no flow reversal for medium 2 [:#(type=Boolean)]
Nominal mass flow rate [kg/s]
Nominal mass flow rate [kg/s]
Small mass flow rate for regularization of zero flow [kg/s]
Small mass flow rate for regularization of zero flow [kg/s]
= true, if actual temperature at port is computed [:#(type=Boolean)]
Pressure difference between port_a1 and port_b1 [Pa|Pa]
Pressure difference between port_a2 and port_b2 [Pa|Pa]
Temperature of medium [K|degC]
Temperature of medium [K|degC]
Temperature of medium [K|degC]
Temperature of medium [K|degC]
= true, use homotopy method [:#(type=Boolean)]
Nominal cooling heat flow rate (QEva_flow_nominal < 0) [W]
Nominal heating flow rate [W]
Temperature difference evaporator outlet-inlet [K,]
Temperature difference condenser outlet-inlet [K,]
Set to true to use Carnot effectiveness etaCarnot_nominal rather than COP_nominal [:#(type=Boolean)]
Carnot effectiveness (=COP/COP_Carnot) used during simulation if use_eta_Carnot_nominal = true [1]
Coefficient of performance at TEva_nominal and TCon_nominal, used during simulation if use_eta_Carnot_nominal = false [1]
Condenser temperature used to compute COP_nominal if use_eta_Carnot_nominal=false [K|degC]
Evaporator temperature used to compute COP_nominal if use_eta_Carnot_nominal=false [K|degC]
Coefficients for efficiency curve (need p(a=a, yPL=1)=1)
Pressure difference over condenser [Pa|Pa]
Pressure difference over evaporator [Pa|Pa]
Temperature difference between refrigerant and working fluid outlet in condenser [K,]
Temperature difference between refrigerant and working fluid outlet in evaporator [K,]
= true, use m_flow = f(dp) else dp = f(m_flow) [:#(type=Boolean)]
= true, use m_flow = f(dp) else dp = f(m_flow) [:#(type=Boolean)]
= true, use linear relation between m_flow and dp for any flow rate [:#(type=Boolean)]
= true, use linear relation between m_flow and dp for any flow rate [:#(type=Boolean)]
Fraction of nominal flow rate where flow transitions to laminar [1]
Fraction of nominal flow rate where flow transitions to laminar [1]
Time constant at nominal flow rate (used if energyDynamics1 <> Modelica.Fluid.Types.Dynamics.SteadyState) [s]
Time constant at nominal flow rate (used if energyDynamics2 <> Modelica.Fluid.Types.Dynamics.SteadyState) [s]
Initial or guess value of set point [K|degC]
Initial or guess value of set point [K|degC]
Type of energy balance: dynamic (3 initialization options) or steady state [:#(type=Modelica.Fluid.Types.Dynamics)]
Part load ratio [1]
Efficiency due to part load (etaPL(yPL=1)=1) [1]
Coefficient of performance [1]
Carnot efficiency
Condenser temperature used to compute efficiency, taking into account pinch temperature between fluid and refrigerant [K|degC]
Evaporator temperature used to compute efficiency, taking into account pinch temperature between fluid and refrigerant [K|degC]
Set to true if the specified COP is for cooling [:#(type=Boolean)]
Carnot effectiveness (=COP/COP_Carnot) used to compute COP [1]
Flag, true if etaPL should be computed as it depends on yPL [:#(type=Boolean)]
Nominal evaporator temperature for chiller or condenser temperature for heat pump, taking into account pinch temperature between fluid and refrigerant [K|degC]
Specific heat capacity of medium 1 at default medium state [J/(kg.K)]
Specific heat capacity of medium 2 at default medium state [J/(kg.K)]
Temperature of medium [K|degC]
Temperature of medium [K|degC]
Temperature of medium [K|degC]
Temperature of medium [K|degC]
= false to simplify equations, assuming, but not enforcing, no flow reversal [:#(type=Boolean)]
Nominal mass flow rate [kg/s]
Small mass flow rate for regularization of zero flow [kg/s]
= true, if actual temperature at port is computed [:#(type=Boolean)]
Pressure difference between port_a and port_b [Pa|Pa]
Start value for m_flow, used to avoid a warning if not set in m_flow, and to avoid m_flow.start in parameter window [kg/s]
Start value for dp, used to avoid a warning if not set in dp, and to avoid dp.start in parameter window [Pa|Pa]
=true, compute flow resistance. Set to false to assume no friction [:#(type=Boolean)]
= true, use m_flow = f(dp) else dp = f(m_flow) [:#(type=Boolean)]
Pressure difference [Pa|Pa]
= true, use linear relation between m_flow and dp for any flow rate [:#(type=Boolean)]
Fraction of nominal flow rate where flow transitions to laminar
= true, use homotopy method [:#(type=Boolean)]
Time constant at nominal flow (if energyDynamics <> SteadyState) [s]
Type of energy balance: dynamic (3 initialization options) or steady state [:#(type=Modelica.Fluid.Types.Dynamics)]
Start value of pressure [Pa|bar]
Start value of temperature [K|degC]
Start value of mass fractions m_i/m [kg/kg]
Type of energy balance: dynamic (3 initialization options) or steady state [:#(type=Modelica.Fluid.Types.Dynamics)]
Type of mass balance: dynamic (3 initialization options) or steady state, must be steady state if energyDynamics is steady state [:#(type=Modelica.Fluid.Types.Dynamics)]
Type of independent mass fraction balance: dynamic (3 initialization options) or steady state [:#(type=Modelica.Fluid.Types.Dynamics)]
Type of trace substance balance: dynamic (3 initialization options) or steady state [:#(type=Modelica.Fluid.Types.Dynamics)]
Start value of pressure [Pa|bar]
Start value of temperature [K|degC]
Start value of mass fractions m_i/m [kg/kg]
Factor for scaling the sensible thermal mass of the volume
True if configuration of energy and mass balance is wrong. [:#(type=Boolean)]
= true to set up initial equations for pressure [:#(type=Boolean)]
Set to true if the model has a prescribed heat flow at its heatPort. If the heat flow rate at the heatPort is only based on temperature difference, then set to false [:#(type=Boolean)]
Set to true to cause port_a.m_flow + port_b.m_flow = 0 even if mWat_flow is non-zero [:#(type=Boolean)]
Nominal mass flow rate [kg/s]
Number of ports [:#(type=Integer)]
Small mass flow rate for regularization of zero flow [kg/s]
= false to simplify equations, assuming, but not enforcing, no flow reversal. Used only if model has two ports. [:#(type=Boolean)]
Volume [m3]
Temperature of the fluid [K|degC]
Internal energy of the component [J]
Mass of the component [kg]
Density, used to compute start and guess values [kg/m3|g/cm3]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Density, used to compute fluid mass [kg/m3|g/cm3]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Flag, true if the model has two ports only and uses a steady state balance [:#(type=Boolean)]
Internal connector for leaving temperature of the component [J/kg]
Set to true to enable input connector for trace substance [:#(type=Boolean)]
= false to simplify equations, assuming, but not enforcing, no flow reversal [:#(type=Boolean)]
Nominal mass flow rate [kg/s]
Small mass flow rate for regularization of zero flow [kg/s]
= true, if actual temperature at port is computed [:#(type=Boolean)]
Pressure difference between port_a and port_b [Pa|Pa]
Start value for m_flow, used to avoid a warning if not set in m_flow, and to avoid m_flow.start in parameter window [kg/s]
Start value for dp, used to avoid a warning if not set in dp, and to avoid dp.start in parameter window [Pa|Pa]
Set to true to cause port_a.m_flow + port_b.m_flow = 0 even if mWat_flow is non-zero [:#(type=Boolean)]
Set to true if the heat flow rate is not a function of a temperature difference to the fluid temperature [:#(type=Boolean)]
Set to true to enable input connector for moisture mass flow rate [:#(type=Boolean)]
Set to true to enable input connector for trace substance [:#(type=Boolean)]
Flag, true if m_flowInv is used in the model [:#(type=Boolean)]
Regularization of 1/m_flow of port_a [s/kg]
Smoothing region for inverseXRegularized
Inverse value of delta for inverseXRegularized
Polynomial coefficient for inverseXRegularized
Polynomial coefficient for inverseXRegularized
Polynomial coefficient for inverseXRegularized
Polynomial coefficient for inverseXRegularized
Polynomial coefficient for inverseXRegularized
Polynomial coefficient for inverseXRegularized
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Specific heat capacity, used to verify energy conservation [J/(kg.K)]
Maximum temperature difference across the StaticTwoPortConservationEquation [K,]
Needed to connect to conditional connector [kg/s]
= false to simplify equations, assuming, but not enforcing, no flow reversal [:#(type=Boolean)]
Nominal mass flow rate [kg/s]
Small mass flow rate for regularization of zero flow [kg/s]
= true, if actual temperature at port is computed [:#(type=Boolean)]
Pressure difference between port_a and port_b [Pa|Pa]
Start value for m_flow, used to avoid a warning if not set in m_flow, and to avoid m_flow.start in parameter window [kg/s]
Start value for dp, used to avoid a warning if not set in dp, and to avoid dp.start in parameter window [Pa|Pa]
= true, use homotopy method [:#(type=Boolean)]
= true, use m_flow = f(dp) else dp = f(m_flow) [:#(type=Boolean)]
Pressure drop at nominal mass flow rate [Pa|Pa]
= true, use linear relation between m_flow and dp for any flow rate [:#(type=Boolean)]
Turbulent flow if |m_flow| >= m_flow_turbulent [kg/s]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Dynamic viscosity, used to compute transition to turbulent flow regime [Pa.s]
Absolute value of nominal flow rate [kg/s]
Absolute value of nominal pressure difference [Pa|Pa]
Fraction of nominal mass flow rate where transition to turbulent occurs
Flow coefficient, k=m_flow/sqrt(dp), with unit=(kg.m)^(1/2)
Flag to enable/disable computation of flow resistance [:#(type=Boolean)]
Precomputed coefficient to avoid division by parameter
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Density, used to compute fluid volume [kg/m3|g/cm3]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Start value for outflowing enthalpy [J/kg]
Heat flow rate at u=1, positive for heating [W]
Control input [1]
Reference temperature [K|degC]
Temperature coefficient of heat flow rate [1/K]
Gain value multiplied with input signal [W]
= false to simplify equations, assuming, but not enforcing, no flow reversal [:#(type=Boolean)]
Nominal mass flow rate [kg/s]
Small mass flow rate for regularization of zero flow [kg/s]
= true, if actual temperature at port is computed [:#(type=Boolean)]
Pressure difference between port_a and port_b [Pa|Pa]
Start value for m_flow, used to avoid a warning if not set in m_flow, and to avoid m_flow.start in parameter window [kg/s]
Start value for dp, used to avoid a warning if not set in dp, and to avoid dp.start in parameter window [Pa|Pa]
=true, compute flow resistance. Set to false to assume no friction [:#(type=Boolean)]
= true, use m_flow = f(dp) else dp = f(m_flow) [:#(type=Boolean)]
Pressure difference [Pa|Pa]
= true, use linear relation between m_flow and dp for any flow rate [:#(type=Boolean)]
Fraction of nominal flow rate where flow transitions to laminar
= true, use homotopy method [:#(type=Boolean)]
Time constant at nominal flow (if energyDynamics <> SteadyState) [s]
Type of energy balance: dynamic (3 initialization options) or steady state [:#(type=Modelica.Fluid.Types.Dynamics)]
Start value of pressure [Pa|bar]
Start value of temperature [K|degC]
Start value of mass fractions m_i/m [kg/kg]
Type of energy balance: dynamic (3 initialization options) or steady state [:#(type=Modelica.Fluid.Types.Dynamics)]
Type of mass balance: dynamic (3 initialization options) or steady state, must be steady state if energyDynamics is steady state [:#(type=Modelica.Fluid.Types.Dynamics)]
Type of independent mass fraction balance: dynamic (3 initialization options) or steady state [:#(type=Modelica.Fluid.Types.Dynamics)]
Type of trace substance balance: dynamic (3 initialization options) or steady state [:#(type=Modelica.Fluid.Types.Dynamics)]
Start value of pressure [Pa|bar]
Start value of temperature [K|degC]
Start value of mass fractions m_i/m [kg/kg]
Factor for scaling the sensible thermal mass of the volume
True if configuration of energy and mass balance is wrong. [:#(type=Boolean)]
= true to set up initial equations for pressure [:#(type=Boolean)]
Set to true if the model has a prescribed heat flow at its heatPort. If the heat flow rate at the heatPort is only based on temperature difference, then set to false [:#(type=Boolean)]
Set to true to cause port_a.m_flow + port_b.m_flow = 0 even if mWat_flow is non-zero [:#(type=Boolean)]
Nominal mass flow rate [kg/s]
Number of ports [:#(type=Integer)]
Small mass flow rate for regularization of zero flow [kg/s]
= false to simplify equations, assuming, but not enforcing, no flow reversal. Used only if model has two ports. [:#(type=Boolean)]
Volume [m3]
Temperature of the fluid [K|degC]
Internal energy of the component [J]
Mass of the component [kg]
Density, used to compute start and guess values [kg/m3|g/cm3]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Density, used to compute fluid mass [kg/m3|g/cm3]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Flag, true if the model has two ports only and uses a steady state balance [:#(type=Boolean)]
Internal connector for leaving temperature of the component [J/kg]
Set to true to enable input connector for trace substance [:#(type=Boolean)]
= false to simplify equations, assuming, but not enforcing, no flow reversal [:#(type=Boolean)]
Nominal mass flow rate [kg/s]
Small mass flow rate for regularization of zero flow [kg/s]
= true, if actual temperature at port is computed [:#(type=Boolean)]
Pressure difference between port_a and port_b [Pa|Pa]
Start value for m_flow, used to avoid a warning if not set in m_flow, and to avoid m_flow.start in parameter window [kg/s]
Start value for dp, used to avoid a warning if not set in dp, and to avoid dp.start in parameter window [Pa|Pa]
Set to true to cause port_a.m_flow + port_b.m_flow = 0 even if mWat_flow is non-zero [:#(type=Boolean)]
Set to true if the heat flow rate is not a function of a temperature difference to the fluid temperature [:#(type=Boolean)]
Set to true to enable input connector for moisture mass flow rate [:#(type=Boolean)]
Set to true to enable input connector for trace substance [:#(type=Boolean)]
Flag, true if m_flowInv is used in the model [:#(type=Boolean)]
Regularization of 1/m_flow of port_a [s/kg]
Smoothing region for inverseXRegularized
Inverse value of delta for inverseXRegularized
Polynomial coefficient for inverseXRegularized
Polynomial coefficient for inverseXRegularized
Polynomial coefficient for inverseXRegularized
Polynomial coefficient for inverseXRegularized
Polynomial coefficient for inverseXRegularized
Polynomial coefficient for inverseXRegularized
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Specific heat capacity, used to verify energy conservation [J/(kg.K)]
Maximum temperature difference across the StaticTwoPortConservationEquation [K,]
Needed to connect to conditional connector [kg/s]
= false to simplify equations, assuming, but not enforcing, no flow reversal [:#(type=Boolean)]
Nominal mass flow rate [kg/s]
Small mass flow rate for regularization of zero flow [kg/s]
= true, if actual temperature at port is computed [:#(type=Boolean)]
Pressure difference between port_a and port_b [Pa|Pa]
Start value for m_flow, used to avoid a warning if not set in m_flow, and to avoid m_flow.start in parameter window [kg/s]
Start value for dp, used to avoid a warning if not set in dp, and to avoid dp.start in parameter window [Pa|Pa]
= true, use homotopy method [:#(type=Boolean)]
= true, use m_flow = f(dp) else dp = f(m_flow) [:#(type=Boolean)]
Pressure drop at nominal mass flow rate [Pa|Pa]
= true, use linear relation between m_flow and dp for any flow rate [:#(type=Boolean)]
Turbulent flow if |m_flow| >= m_flow_turbulent [kg/s]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Dynamic viscosity, used to compute transition to turbulent flow regime [Pa.s]
Absolute value of nominal flow rate [kg/s]
Absolute value of nominal pressure difference [Pa|Pa]
Fraction of nominal mass flow rate where transition to turbulent occurs
Flow coefficient, k=m_flow/sqrt(dp), with unit=(kg.m)^(1/2)
Flag to enable/disable computation of flow resistance [:#(type=Boolean)]
Precomputed coefficient to avoid division by parameter
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Density, used to compute fluid volume [kg/m3|g/cm3]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Start value for outflowing enthalpy [J/kg]
Heat flow rate at u=1, positive for heating [W]
Control input [1]
Reference temperature [K|degC]
Temperature coefficient of heat flow rate [1/K]
Gain value multiplied with input signal [W]
Nominal compressor power (at y=1) [W]
Part load ratio of compressor [1]
Condenser heat input [W]
Evaporator heat input [W]
Gain value multiplied with input signal [1]
Cut torque in the flange [N.m]
Moment of inertia [kg.m2]
Priority to use phi and w as states [:#(type=StateSelect)]
Absolute rotation angle of component [rad|deg]
Absolute angular velocity of component (= der(phi)) [rad/s]
der(Absolute angular velocity of component (= der(phi))) [rad/s2]
= true, if support flange enabled, otherwise implicitly grounded [:#(type=Boolean)]
Absolute angle of support flange [rad|deg]
Cut torque in the flange [N.m]
Connector of Real output signal containing input signal u in another unit [rev/min]
Number of significant digits to be shown in dynamic diagram layer for y [:#(type=Integer)]
Number of input connections [:#(type=Integer)]

Gain value multiplied with input signal [1]
Actual heating heat flow rate added to fluid 1 [W]
Electric power consumed [W]
Actual cooling heat flow rate removed from fluid 2 [W]
Set to true if the specified COP is for cooling [:#(type=Boolean)]
Nominal evaporator temperature for chiller or condenser temperature for     heat pump, taking into account pinch temperature between fluid and refrigerant [K|degC]
Specific heat capacity of medium 1 at default medium state [J/(kg.K)]
Specific heat capacity of medium 2 at default medium state [J/(kg.K)]
Number of Poles [:#(type=Integer)]
Moment of Inertia [kg/m²] []
Rotor Inductance [H] []
Stator Inductance [H] []
Mutual Inductance [H] []
Stator Resistance [ohm] []
Rotor Resistance [ohm] []
Standard Frequency [Hz] []
Standard Voltage [V] []
Number of poles [:#(type=Integer)]
Moment of inertia
Rotor inductance [H] []
Stator inductance [H] []
Mutual inductance [H] []
Rotor resistance [ohm] []
Stator resistance [ohm] []
Set to true for enable PID control, False for simple speed control [:#(type=Boolean)]
Set to true for reverseActing in heating and set to false in cooling mode [:#(type=Boolean)]
Type of controller [:#(type=Modelica.Blocks.Types.SimpleController)]
Gain of controller
Time constant of Integrator block [s]
Time constant of Derivative block [s]
Upper limit of output
Lower limit of output
RMS voltage
RMS current

Supply voltage phase angel [rad|deg]
der(Supply voltage phase angel) [rad/s]
Value of Real output
Connector of Real input signal 1








[:#(type=Integer)]

Gain value multiplied with input signal [1]
Output signal connector
Integrator gain [1]
= true, if reset port enabled [:#(type=Boolean)]
= true, if set port enabled and used as reinitialization value when reset [:#(type=Boolean)]
Type of initialization (1: no init, 2: steady state, 3,4: initial output) [:#(type=Modelica.Blocks.Types.Init)]
Initial or guess value of output (= state)
[:#(type=Boolean)]

Gain value multiplied with input signal [1]
Integrator gain [1]
= true, if reset port enabled [:#(type=Boolean)]
= true, if set port enabled and used as reinitialization value when reset [:#(type=Boolean)]
Type of initialization (1: no init, 2: steady state, 3,4: initial output) [:#(type=Modelica.Blocks.Types.Init)]
Initial or guess value of output (= state)
Connector of Real input signal
Connector of Real output signal
der(Connector of Real output signal)
[:#(type=Boolean)]

Number of poles [:#(type=Integer)]






[Ohm]
[Ohm]
[Ohm]
[Ohm]
[Ohm]





Integrator gain [1]
= true, if reset port enabled [:#(type=Boolean)]
= true, if set port enabled and used as reinitialization value when reset [:#(type=Boolean)]
Type of initialization (1: no init, 2: steady state, 3,4: initial output) [:#(type=Modelica.Blocks.Types.Init)]
Initial or guess value of output (= state)
Connector of Real output signal
der(Connector of Real output signal)
[:#(type=Boolean)]






Integrator gain [1]
= true, if reset port enabled [:#(type=Boolean)]
= true, if set port enabled and used as reinitialization value when reset [:#(type=Boolean)]
Type of initialization (1: no init, 2: steady state, 3,4: initial output) [:#(type=Modelica.Blocks.Types.Init)]
Initial or guess value of output (= state)
Connector of Real output signal
der(Connector of Real output signal)
[:#(type=Boolean)]

Constant output value





Integrator gain [1]
= true, if reset port enabled [:#(type=Boolean)]
= true, if set port enabled and used as reinitialization value when reset [:#(type=Boolean)]
Type of initialization (1: no init, 2: steady state, 3,4: initial output) [:#(type=Modelica.Blocks.Types.Init)]
Initial or guess value of output (= state)
Connector of Real output signal
der(Connector of Real output signal)
[:#(type=Boolean)]






Integrator gain [1]
= true, if reset port enabled [:#(type=Boolean)]
= true, if set port enabled and used as reinitialization value when reset [:#(type=Boolean)]
Type of initialization (1: no init, 2: steady state, 3,4: initial output) [:#(type=Modelica.Blocks.Types.Init)]
Initial or guess value of output (= state)
Connector of Real output signal
der(Connector of Real output signal)
[:#(type=Boolean)]

Constant output value
Number of pole pairs [:#(type=Integer)]





Value in hertz
Value in radian per second
= true, if support flange enabled, otherwise implicitly grounded [:#(type=Boolean)]
Absolute angle of support flange [rad|deg]
Is true/false for exact treatment/filtering of the input signal, respectively [:#(type=Boolean)]
If exact=false, critical frequency of filter to filter input signal [Hz]
Rotation angle of flange with respect to support [rad|deg]
der(Rotation angle of flange with respect to support) [rad/s]
If exact=false, angular acceleration of flange with respect to support else dummy [rad/s2]
Critical frequency [rad/s]
Gain value multiplied with input signal [1]
Output signal connector
Connector of actuator output signal
Control error (set point - measurement)
Type of controller [:#(type=Modelica.Blocks.Types.SimpleController)]
Gain of controller
Time constant of Integrator block [s]
Time constant of Derivative block [s]
Upper limit of output
Lower limit of output
Set-point weight for Proportional block (0..1)
Set-point weight for Derivative block (0..1)
Ni*Ti is time constant of anti-windup compensation
The higher Nd, the more ideal the derivative block
Type of initialization (1: no init, 2: steady state, 3: initial state, 4: initial output) [:#(type=Modelica.Blocks.Types.Init)]
Initial or guess value value for integrator output (= integrator state)
Initial or guess value for state of derivative block
Initial value of output
= true, if strict limits with noEvent(..) [:#(type=Boolean)]
Set to true for reverse acting, or false for direct acting control action [:#(type=Boolean)]
Type of controller output reset [:#(type=Buildings.Types.Reset)]
Value to which the controller output is reset if the boolean trigger has a rising edge, used if reset == Buildings.Types.Reset.Parameter
Connector of Real output signal
Gain of input signal 1
Gain of input signal 2
Gain value multiplied with input signal [1]
Output signal connector
Gain of input signal 1
Gain of input signal 2
Gain of input signal 3
Connector of Real input signal 2
Connector of Real output signal
[s]
Switch for sign for reverse or direct acting controller
Boolean flag to enable integral action [:#(type=Boolean)]
Boolean flag to enable derivative action [:#(type=Boolean)]
Constant output value
Connector of Real output signal
Internal connector for controller output reset
Gain of input signal 1
Gain of input signal 2
Gain of input signal 3
Connector of Real input signal 3
Connector of Real output signal
Connector of Real output signal
Gain of input signal 1
Gain of input signal 2
Gain value multiplied with input signal [1]
Output signal connector
Gain value multiplied with input signal [1]
Upper limits of input signals
Lower limits of input signals
= true, if strict limits with noEvent(..) [:#(type=Boolean)]
Has no longer an effect and is only kept for backwards compatibility (the implementation uses now the homotopy operator) [:#(type=Boolean)]
Connector of Real output signal
der(Connector of Real output signal)
Integrator gain [1]
Type of initialization (1: no init, 2: steady state, 3,4: initial output) [:#(type=Modelica.Blocks.Types.Init)]
Initial or guess value of output (= state)
Type of integrator reset [:#(type=Buildings.Types.Reset)]
Value to which integrator is reset, used if reset = Buildings.Types.Reset.Parameter
Internal connector for integrator reset
Needed to use conditional connector trigger [:#(type=Boolean)]
Connector of second Real input signal
Set to true if the specified COP is for cooling [:#(type=Boolean)]
Nominal evaporator temperature for chiller or condenser temperature for heat pump,     taking into account pinch temperature between fluid and refrigerant [K|degC]
Specific heat capacity of medium 1 at default medium state [J/(kg.K)]
Specific heat capacity of medium 2 at default medium state [J/(kg.K)]
Height of ramps
Duration of ramp (= 0.0 gives a Step) [s]
Offset of output signal y
Output y = offset for time < startTime [s]
[s]

Number of calls to solve this system
Number of evaluations of the system residual
Number of iterations performed to solve this system
Number of evaluations of the analytic system Jacobian
Number of calls to solve this system
Number of evaluations of the system residual
Number of iterations performed to solve this system
Number of evaluations of the analytic system Jacobian

