within Buildings.Electrical.AC.ThreePhasesBalanced.Loads.MotorDrive.Coupled;
model Pump "Motor coupled chiller"
  extends Buildings.Fluid.Interfaces.PartialTwoPort(
    port_a(p(start=Medium.p_default)),
    port_b(p(start=Medium.p_default)));
  extends Buildings.Electrical.Interfaces.PartialOnePort(
    redeclare package PhaseSystem =
        Buildings.Electrical.PhaseSystems.OnePhase,
    redeclare replaceable Interfaces.Terminal_n terminal);

  parameter Boolean addPowerToMedium=true
    "Set to false to avoid any power (e.g heat generated by the pump) being 
    added to medium";
  replaceable parameter Buildings.Fluid.Movers.Data.Generic per
    constrainedby Buildings.Fluid.Movers.Data.Generic
    "Record with performance data"
     annotation (choicesAllMatching=true,Placement(transformation(
     extent={{-80,-68},{-60,-48}})));

  //Motor parameters
  parameter Integer pole=4 "Number of pole pairs";
  parameter Modelica.Units.SI.Resistance R_s=0.013
    "Electric resistance of stator";
  parameter Modelica.Units.SI.Resistance R_r=0.009
    "Electric resistance of rotor";
  parameter Modelica.Units.SI.Reactance X_s=0.14
    "Complex component of the impedance of stator";
  parameter Modelica.Units.SI.Reactance X_r=0.12
    "Complex component of the impedance of rotor";
  parameter Modelica.Units.SI.Reactance X_m=2.4
    "Complex component of the magnetizing reactance";
  parameter Modelica.Units.SI.Inertia JLoad(min=0)=2 "Pump inertia";
  parameter Modelica.Units.SI.Inertia JMotor=2 "Motor inertia";

  //Controller parameters
  parameter Boolean have_controller = true
    "Set to true for enableing PID control";
  parameter Modelica.Blocks.Types.SimpleController
    controllerType=Modelica.Blocks.Types.SimpleController.PI
    "Type of controller"
      annotation (Dialog(tab="Advanced",
                         group="Controller",
                         enable=have_controller));
  parameter Real k(min=0) = 1
     "Gain of controller"
      annotation (Dialog(tab="Advanced",
                         group="Controller",
                         enable=have_controller));
  parameter Modelica.Units.SI.Time Ti(min=Modelica.Constants.small)=0.5
     "Time constant of Integrator block"
      annotation (Dialog(tab="Advanced",
                         group="Controller",
                         enable=have_controller and
    controllerType == Modelica.Blocks.Types.SimpleController.PI or
    controllerType == Modelica.Blocks.Types.SimpleController.PID));
  parameter Modelica.Units.SI.Time Td(min=0) = 0.1
     "Time constant of Derivative block"
      annotation (Dialog(tab="Advanced",
                         group="Controller",
                         enable=have_controller and
    controllerType == Modelica.Blocks.Types.SimpleController.PD or
    controllerType == Modelica.Blocks.Types.SimpleController.PID));
  parameter Real yMax(start=1)=1
    "Upper limit of output"
     annotation (Dialog(tab="Advanced",
                       group="Controller",
                       enable=have_controller));
  parameter Real yMin=0
    "Lower limit of output"
     annotation (Dialog(tab="Advanced",
                       group="Controller",
                       enable=have_controller));

  final Modelica.Blocks.Sources.RealExpression loaTor(y=pum.shaft.tau)
    "Pump torque block"
    annotation (Placement(transformation(extent={{-28,0},{-48,20}})));
  Buildings.Electrical.AC.ThreePhasesBalanced.Loads.MotorDrive.ThermoFluid.Pump pum(
    redeclare final package Medium = Medium,
    final addPowerToMedium=addPowerToMedium,
    Nrpm_nominal=1500,
    redeclare final
      Buildings.Fluid.Movers.Data.Pumps.Wilo.VeroLine50slash150dash4slash2 per)
                   "Mechanical pump with mechanical interface"
    annotation (Placement(transformation(extent={{-10,-10},{10,10}})));

  Modelica.Blocks.Interfaces.RealInput setPoi "Set point of control target"
    annotation (Placement(transformation(
        extent={{-10,-10},{10,10}},
        rotation=0,
        origin={-110,80}), iconTransformation(
        extent={{-10,-10},{10,10}},
        rotation=0,
        origin={-110,80})));
  Modelica.Blocks.Interfaces.RealInput meaPoi "Measured value of control target"
    annotation (Placement(transformation(extent={{-120,40},{-100,60}}),
        iconTransformation(extent={{-120,30},{-100,50}})));
  Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a heatPort
    "Heat dissipation to environment"
    annotation (Placement(transformation(extent={{-10,-78},{10,-58}}),
        iconTransformation(extent={{-10,-78},{10,-58}})));

  InductionMotors.SquirrelCageDrive motDri(
    P=pole,
    J=JMotor,
    Lr=X_r,
    Ls=X_s,
    Rr=R_r,
    Lm=X_m,
    Rs=R_s) annotation (Placement(transformation(extent={{-52,28},{-28,48}})));
equation

  connect(port_a, pum.port_a) annotation (Line(points={{-100,0},{-10,0}},
          color={0,127,255}));
  connect(pum.port_b, port_b) annotation (Line(points={{10,0},{100,0}},
          color={0,127,255}));
  connect(pum.heatPort, heatPort) annotation (Line(points={{0,-6.8},{0,-20},
          {0,-68},{0,-68}}, color={191,0,0}));
  connect(motDri.setPoi, setPoi) annotation (Line(points={{-53.8,46},{-60,46},
          {-60,80},{-110,80}},color={0,0,127}));
  connect(motDri.mea, meaPoi) annotation (Line(points={{-53.8,40},{-94,40},{
          -94,50},{-110,50}},
                          color={0,0,127}));
  connect(motDri.tau_m, loaTor.y) annotation (Line(points={{-53.8,30},{-60,30},
          {-60,10},{-49,10}}, color={0,0,127}));
  connect(motDri.terminal, terminal) annotation (Line(points={{-38,48},{-38,
          86},{0,86},{0,100}},
                           color={0,120,120}));
  connect(motDri.shaft, pum.shaft)
    annotation (Line(points={{-28,38},{0,38},{0,10}}, color={0,0,0}));
  connect(port_a, port_a) annotation (Line(
      points={{-100,0},{-100,0}},
      color={0,127,255}));
  annotation (Icon(coordinateSystem(preserveAspectRatio=true,
        extent={{-100,-80},{100,100}}),  graphics={
        Rectangle(
          extent={{-100,16},{100,-16}},
          lineColor={0,0,0},
          fillColor={0,127,255},
          fillPattern=FillPattern.HorizontalCylinder),
        Rectangle(
          visible=use_inputFilter,
          extent={{-10,44},{10,100}},
          lineColor={0,0,0},
          fillColor={135,135,135},
          fillPattern=FillPattern.Solid),
        Ellipse(
          extent={{-58,58},{58,-58}},
          lineColor={0,0,0},
          fillPattern=FillPattern.Sphere,
          fillColor={0,100,199}),
        Polygon(
          points={{0,50},{0,-50},{54,0},{0,50}},
          lineColor={0,0,0},
          pattern=LinePattern.None,
          fillPattern=FillPattern.HorizontalCylinder,
          fillColor={255,255,255}),
        Ellipse(
          extent={{4,16},{36,-16}},
          lineColor={0,0,0},
          fillPattern=FillPattern.Sphere,
          visible=energyDynamics <> Modelica.Fluid.Types.Dynamics.SteadyState,
          fillColor={0,100,199}),
        Line(
          points={{10,90},{100,90}},
          color={0,0,0},
          smooth=Smooth.None),
        Line(
          points={{10,70},{100,70}},
          color={0,0,0},
          smooth=Smooth.None),
        Text(extent={{66,104},{116,90}},
          textColor={0,0,127},
          textString="P"),
        Text(extent={{66,84},{116,70}},
          textColor={0,0,127},
          textString="Q"),
        Text(extent={{-140,108},{-90,94}},
          textColor={0,0,127},
          textString="set_point"),
        Text(extent={{-140,72},{-60,44}},
          textColor={0,0,127},
          textString="measure_value")}),
        defaultComponentName="pum",
    Documentation(info="<html>
<p>
This is a model of a squirrel cage induction motor coupled pump with ideal 
speed control. The model has electrical interfaces and can be used for 
simulating microgrids and discussing grid interactions.
</p>
</html>", revisions="<html>
<ul>
<li>May 07, 2024, by Viswanathan Ganesh and Zhanwei He:<br>Updated Implementation. </li>
<li>September 15, 2021, by Mingzhe Liu:<br>Refactored implementation to add mechanical interface and integrate inertia. </li>
<li>March 6, 2019, by Yangyang Fu:<br>First implementation. </li>
</ul>
</html>"),
    Diagram(coordinateSystem(extent={{-100,-80},{100,100}})));
end Pump;
