within Buildings.Electrical.AC.ThreePhasesBalanced.Loads.MotorDrive.Coupled;
model Pump "Motor coupled pump"
  extends Buildings.Fluid.Interfaces.PartialTwoPort(
    port_a(p(start=Medium.p_default)),
    port_b(p(start=Medium.p_default)));
  extends Buildings.Electrical.Interfaces.PartialOnePort(
    redeclare final package PhaseSystem = Buildings.Electrical.PhaseSystems.OnePhase,
    redeclare final replaceable Interfaces.Terminal_n terminal);

  parameter Boolean addPowerToMedium=true
    "Set to false to avoid any power (e.g heat generated by the pump) being added to medium";
  replaceable parameter Buildings.Fluid.Movers.Data.Generic per
    constrainedby Buildings.Fluid.Movers.Data.Generic
    "Record of pump with performance data"
     annotation (choicesAllMatching=true,Placement(transformation(extent={{-80,-60},
            {-60,-40}})));

  //Motor parameters
  parameter Modelica.Units.SI.Inertia loaIne=1 "Pump inertia"
    annotation (Dialog(tab="Motor"));
  parameter Modelica.Units.NonSI.AngularVelocity_rpm Nrpm_nominal=1500
    "Nominal rotational speed of pump"
    annotation (Dialog(tab="Motor"));
  replaceable parameter Buildings.Electrical.AC.ThreePhasesBalanced.Loads.MotorDrive.InductionMotors.Data.Generic
    motPer constrainedby
    Buildings.Electrical.AC.ThreePhasesBalanced.Loads.MotorDrive.InductionMotors.Data.Generic
    "Record of induction machine with performance data"
    annotation (Dialog(tab="Motor"), choicesAllMatching=true, Placement(transformation(extent={{42,60},
            {62,80}})));
  parameter Boolean reverseActing=true
    "Default: Set to true in heating and set to false in cooling mode"
    annotation (Dialog(tab="Motor", group="Motor controller"));
  parameter Real r=1
    "Typical range of control error, used for scaling the control error"
    annotation (Dialog(tab="Motor", group="Motor controller"));
  parameter Modelica.Blocks.Types.SimpleController controllerType=Modelica.Blocks.Types.SimpleController.PI
    "Type of controller"
    annotation (Dialog(tab="Motor", group="Motor controller"));
  parameter Real k(min=0) = 1
    "Gain of controller"
    annotation (Dialog(tab="Motor", group="Motor controller"));
  parameter Modelica.Units.SI.Time Ti(min=Modelica.Constants.small)=0.5
    "Time constant of Integrator block"
    annotation (Dialog(tab="Motor", group="Motor controller",
                       enable=controllerType == Modelica.Blocks.Types.SimpleController.PI or
                              controllerType == Modelica.Blocks.Types.SimpleController.PID));
  parameter Modelica.Units.SI.Time Td(min=0) = 0.1
    "Time constant of Derivative block"
    annotation (Dialog(tab="Motor", group="Motor controller",
                       enable=controllerType == Modelica.Blocks.Types.SimpleController.PD or
                              controllerType == Modelica.Blocks.Types.SimpleController.PID));
  parameter Real yMax(start=1)=1
    "Upper limit of output"
    annotation (Dialog(tab="Motor", group="Motor controller"));
  parameter Real yMin=0
    "Lower limit of output"
    annotation (Dialog(tab="Motor", group="Motor controller"));
  parameter Modelica.Fluid.Types.Dynamics energyDynamics=Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
    "Type of energy balance: dynamic (3 initialization options) or steady state"
    annotation (Dialog(tab="Dynamics", group="Conservation equations"));
  parameter Modelica.Units.SI.Time tau=1
    "Time constant of fluid volume for nominal flow, used if energy or mass balance is dynamic"
    annotation (Dialog(tab="Dynamics", group="Conservation equations"));
  parameter Boolean use_riseTime=true
    "Set to true to continuously change motor speed"
    annotation (Dialog(tab="Dynamics", group="Motor speed"));
  parameter Modelica.Units.SI.Time riseTime=30
    "Time needed to change motor speed between zero and full speed"
    annotation (Dialog(tab="Dynamics", group="Motor speed"));
  parameter Modelica.Blocks.Types.Init init=Modelica.Blocks.Types.Init.InitialOutput
    "Type of initialization (no init/steady state/initial state/initial output)"
    annotation (Dialog(tab="Dynamics", group="Motor speed"));
  parameter Real y_start=0 "Initial value of speed"
    annotation (Dialog(tab="Dynamics", group="Motor speed"));
  parameter Modelica.Media.Interfaces.Types.AbsolutePressure p_start=Medium.p_default
    "Start value of pressure"
    annotation (Dialog(tab="Initialization"));
  parameter Modelica.Media.Interfaces.Types.Temperature T_start=Medium.T_default
    "Start value of temperature"
    annotation (Dialog(tab="Initialization"));
  parameter Modelica.Media.Interfaces.Types.MassFraction X_start[Medium.nX]=
      Medium.X_default "Start value of mass fractions m_i/m"
    annotation (Dialog(tab="Initialization"));
  parameter Modelica.Media.Interfaces.Types.ExtraProperty C_start[Medium.nC]=
      fill(0, Medium.nC) "Start value of trace substances"
    annotation (Dialog(tab="Initialization"));
  parameter Modelica.Media.Interfaces.Types.ExtraProperty C_nominal[Medium.nC]=
      fill(1E-2, Medium.nC)
    "Nominal value of trace substances. (Set to typical order of magnitude.)"
    annotation (Dialog(tab="Initialization"));
  parameter Boolean show_T=false
    "= true, if actual temperature at port is computed"
    annotation (Dialog(tab="Advanced", group="Diagnostics"));

  Buildings.Controls.OBC.CDL.Interfaces.RealInput m_flow_set(unit="kg/s")
    "Set point of mass flow rate"
    annotation (Placement(transformation(extent={{-140,60},{-100,100}}),
        iconTransformation(extent={{-140,60},{-100,100}})));
  Buildings.Controls.OBC.CDL.Interfaces.RealInput m_flow(unit="kg/s")
    "Measured mass flow rate"
    annotation (Placement(transformation(extent={{-140,30},{-100,70}}),
        iconTransformation(extent={{-140,20},{-100,60}})));
  Buildings.Controls.OBC.CDL.Interfaces.RealOutput P(
    final quantity="Power",
    final unit="W")
    "Electrical power consumed"
    annotation (Placement(transformation(extent={{100,80},{120,100}}),
        iconTransformation(extent={{100,80},{120,100}})));
  Buildings.Controls.OBC.CDL.Interfaces.RealOutput y_actual(
    final unit="1")
    "Actual normalised pump speed that is used for computations"
    annotation (Placement(transformation(extent={{100,60},{120,80}}),
        iconTransformation(extent={{100,60},{120,80}})));

  Buildings.Electrical.AC.ThreePhasesBalanced.Loads.MotorDrive.ThermoFluid.Pump pum(
    redeclare final package Medium = Medium,
    final allowFlowReversal=allowFlowReversal,
    final loaIne=loaIne,
    final addPowerToMedium=addPowerToMedium,
    final Nrpm_nominal=Nrpm_nominal,
    final per=per,
    final energyDynamics=energyDynamics,
    final tau=tau,
    final use_riseTime=use_riseTime,
    final riseTime=riseTime,
    final init=init,
    final y_start=y_start,
    final p_start=p_start,
    final T_start=T_start,
    final X_start=X_start,
    final C_start=C_start,
    final C_nominal=C_nominal,
    final show_T=show_T)
    "Mechanical pump with mechanical interface"
    annotation (Placement(transformation(extent={{-10,-10},{10,10}})));

  Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a heatPort
    "Heat dissipation to environment"
    annotation (Placement(transformation(extent={{-10,-78},{10,-58}}),
        iconTransformation(extent={{-10,-78},{10,-58}})));

  Buildings.Electrical.AC.ThreePhasesBalanced.Loads.MotorDrive.InductionMotors.SquirrelCageDrive
    motDri(
    final per=motPer,
    final reverseActing=reverseActing,
    final r=r,
    final controllerType=controllerType,
    final k=k,
    final Ti=Ti,
    final Td=Td,
    final yMax=yMax,
    final yMin=yMin)
    annotation (Placement(transformation(extent={{-40,40},{-20,60}})));

protected
  Modelica.Blocks.Sources.RealExpression loaTor(
    final y=1.732*pum.shaft.tau)
    "Pump torque block"
    annotation (Placement(transformation(extent={{-20,10},{-40,30}})));

equation
  connect(port_a, pum.port_a) annotation (Line(points={{-100,0},{-10,0}},
          color={0,127,255}));
  connect(pum.port_b, port_b) annotation (Line(points={{10,0},{100,0}},
          color={0,127,255}));
  connect(pum.heatPort, heatPort) annotation (Line(points={{0,-6.8},{0,-20},
          {0,-68},{0,-68}}, color={191,0,0}));
  connect(motDri.setPoi, m_flow_set) annotation (Line(points={{-42,58},{-60,58},
          {-60,80},{-120,80}}, color={0,0,127}));
  connect(motDri.mea,m_flow)  annotation (Line(points={{-42,50},{-120,50}},
          color={0,0,127}));
  connect(motDri.tau_m, loaTor.y) annotation (Line(points={{-42,42},{-60,42},{
          -60,20},{-41,20}},  color={0,0,127}));
  connect(motDri.terminal, terminal) annotation (Line(points={{-30,60},{-30,80},
          {0,80},{0,100}}, color={0,120,120}));
  connect(motDri.shaft, pum.shaft)
    annotation (Line(points={{-20,50},{0,50},{0,10}}, color={0,0,0}));
  connect(pum.P, P) annotation (Line(points={{11,9},{80,9},{80,90},{110,90}},
        color={0,0,127}));
  connect(pum.y_actual, y_actual) annotation (Line(points={{11,7},{84,7},{84,70},
          {110,70}}, color={0,0,127}));
  annotation (defaultComponentName="pum",
  Icon(coordinateSystem(preserveAspectRatio=true,
        extent={{-100,-100},{100,100}}),  graphics={
        Rectangle(
          extent={{-100,16},{100,-16}},
          lineColor={0,0,0},
          fillColor={0,127,255},
          fillPattern=FillPattern.HorizontalCylinder),
        Rectangle(
          visible=use_riseTime,
          extent={{-10,44},{10,100}},
          lineColor={0,0,0},
          fillColor={135,135,135},
          fillPattern=FillPattern.Solid),
        Ellipse(
          extent={{-58,58},{58,-58}},
          lineColor={0,0,0},
          fillPattern=FillPattern.Sphere,
          fillColor={0,100,199}),
        Polygon(
          points={{0,50},{0,-50},{54,0},{0,50}},
          lineColor={0,0,0},
          pattern=LinePattern.None,
          fillPattern=FillPattern.HorizontalCylinder,
          fillColor={255,255,255}),
        Ellipse(
          extent={{4,16},{36,-16}},
          lineColor={0,0,0},
          fillPattern=FillPattern.Sphere,
          visible=energyDynamics <> Modelica.Fluid.Types.Dynamics.SteadyState,
          fillColor={0,100,199}),
        Line(
          points={{10,90},{100,90}},
          color={0,0,0},
          smooth=Smooth.None),
        Line(
          points={{10,70},{100,70}},
          color={0,0,0},
          smooth=Smooth.None),
        Text(extent={{52,102},{102,88}},
          textColor={0,0,127},
          textString="P"),
        Text(extent={{-126,106},{-76,92}},
          textColor={0,0,127},
          textString="m_flow_set"),
        Text(extent={{-140,66},{-82,52}},
          textColor={0,0,127},
          textString="m_flow"),
        Text(extent={{50,86},{100,72}},textColor={0,0,127},textString="y_actual")}),
Documentation(info="<html>
<p>
This is a model of a squirrel cage induction motor coupled pump with ideal speed
control. The chiller operation is regulated such that mass flow rate is able to reach
its setpoint. The model has electrical interfaces and can be used for simulating
microgrids and discussing grid interactions.
</p>
<p>
The model can be customized by selecting the follwoing parameters:
</p>
<ul>
<li>
<code>per</code>: record of pump with performance data
</li>
<li>
<code>motPer</code>: record of induction motor parameters
</li>
<li>
<code>motPer</code> needs to be selected such that rating of induction motor is
slightly greater or equal to the pump rating in the manufacturer datasheet.
</li>
<li>
<code>riseTime</code> in the dynamics helps to set the response of the fluid by
regulating the motor speed to meet the prescribed mass flow. To get the desired
equipment response along with <code>riseTime</code> the gains of the controller
also needs to be tuned.
</li>
</ul>
</html>", revisions="<html>
<ul>
<li>
May 07, 2024, by Viswanathan Ganesh and Zhanwei He:<br/>
Updated Implementation.
</li>
<li>
September 15, 2021, by Mingzhe Liu:<br/>
Refactored implementation to add mechanical interface and integrate inertia.
</li>
<li>
March 6, 2019, by Yangyang Fu:<br/>
First implementation.
</li>
</ul>
</html>"),
    Diagram(coordinateSystem(extent={{-100,-80},{100,100}})));
end Pump;
